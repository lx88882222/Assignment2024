
serialTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000315c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08003340  08003340  00013340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b8  080035b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080035b8  080035b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035b8  080035b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080035c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  08003630  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003630  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000773e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001641  00000000  00000000  000277d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  00028e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  000294d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f1d  00000000  00000000  00029b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089e0  00000000  00000000  00042a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b20  00000000  00000000  0004b3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbf1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002264  00000000  00000000  000dbf70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08003328 	.word	0x08003328

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08003328 	.word	0x08003328

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <u1_printf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void u1_printf(char* fmt, ...) {
 8000234:	b40f      	push	{r0, r1, r2, r3}
 8000236:	b580      	push	{r7, lr}
 8000238:	b0b4      	sub	sp, #208	; 0xd0
 800023a:	af00      	add	r7, sp, #0
  uint16_t len;
  va_list ap;
  va_start(ap, fmt);
 800023c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  uint8_t buf[200];
  vsprintf((char*)buf, fmt, ap);
 8000244:	463b      	mov	r3, r7
 8000246:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800024a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800024e:	4618      	mov	r0, r3
 8000250:	f001 ff7e 	bl	8002150 <vsiprintf>
  va_end(ap);
  len = strlen((char*)buf);
 8000254:	463b      	mov	r3, r7
 8000256:	4618      	mov	r0, r3
 8000258:	f7ff ffe4 	bl	8000224 <strlen>
 800025c:	4603      	mov	r3, r0
 800025e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
  HAL_UART_Transmit(&huart1, buf, len, HAL_MAX_DELAY);
 8000262:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8000266:	4639      	mov	r1, r7
 8000268:	f04f 33ff 	mov.w	r3, #4294967295
 800026c:	4804      	ldr	r0, [pc, #16]	; (8000280 <u1_printf+0x4c>)
 800026e:	f001 fc8f 	bl	8001b90 <HAL_UART_Transmit>
}
 8000272:	bf00      	nop
 8000274:	37d0      	adds	r7, #208	; 0xd0
 8000276:	46bd      	mov	sp, r7
 8000278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr
 8000280:	20000094 	.word	0x20000094

08000284 <process_input>:
    HAL_UART_Receive_IT(&huart1, &rxBuffer[rxIndex], 1);
  }
}

void process_input(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
  int a, b;
  if (sscanf((char*)rxBuffer, "%d %d", &a, &b) == 2)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	f107 0208 	add.w	r2, r7, #8
 8000290:	490e      	ldr	r1, [pc, #56]	; (80002cc <process_input+0x48>)
 8000292:	480f      	ldr	r0, [pc, #60]	; (80002d0 <process_input+0x4c>)
 8000294:	f001 ff1a 	bl	80020cc <siscanf>
 8000298:	4603      	mov	r3, r0
 800029a:	2b02      	cmp	r3, #2
 800029c:	d108      	bne.n	80002b0 <process_input+0x2c>
  {
    int sum = a + b;
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4413      	add	r3, r2
 80002a4:	60fb      	str	r3, [r7, #12]
    u1_printf("%d\r\n", sum);
 80002a6:	68f9      	ldr	r1, [r7, #12]
 80002a8:	480a      	ldr	r0, [pc, #40]	; (80002d4 <process_input+0x50>)
 80002aa:	f7ff ffc3 	bl	8000234 <u1_printf>
 80002ae:	e002      	b.n	80002b6 <process_input+0x32>
  }
  else
  {
    u1_printf("Invalid input. Please enter two integers separated by a space.\r\n");
 80002b0:	4809      	ldr	r0, [pc, #36]	; (80002d8 <process_input+0x54>)
 80002b2:	f7ff ffbf 	bl	8000234 <u1_printf>
  }
  rxIndex = 0;
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <process_input+0x58>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
  rxComplete = 0;
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <process_input+0x5c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	08003350 	.word	0x08003350
 80002d0:	20000120 	.word	0x20000120
 80002d4:	08003358 	.word	0x08003358
 80002d8:	08003360 	.word	0x08003360
 80002dc:	20000184 	.word	0x20000184
 80002e0:	20000185 	.word	0x20000185

080002e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e8:	f000 fa3c 	bl	8000764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ec:	f000 f848 	bl	8000380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f0:	f000 f8d4 	bl	800049c <MX_GPIO_Init>
  MX_DMA_Init();
 80002f4:	f000 f8b4 	bl	8000460 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80002f8:	f000 f888 	bl	800040c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  u1_printf("Enter two integers separated by a space:\r\n");
 80002fc:	481b      	ldr	r0, [pc, #108]	; (800036c <main+0x88>)
 80002fe:	f7ff ff99 	bl	8000234 <u1_printf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (HAL_UART_Receive(&huart1, &u1_ReceiveBit, 1, MAX_BUFFER_LENGTH) != HAL_OK);
 8000302:	bf00      	nop
 8000304:	2364      	movs	r3, #100	; 0x64
 8000306:	2201      	movs	r2, #1
 8000308:	4919      	ldr	r1, [pc, #100]	; (8000370 <main+0x8c>)
 800030a:	481a      	ldr	r0, [pc, #104]	; (8000374 <main+0x90>)
 800030c:	f001 fccb 	bl	8001ca6 <HAL_UART_Receive>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d1f6      	bne.n	8000304 <main+0x20>
	  if (u1_ReceiveBit == '\n') {
 8000316:	4b16      	ldr	r3, [pc, #88]	; (8000370 <main+0x8c>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b0a      	cmp	r3, #10
 800031c:	d11b      	bne.n	8000356 <main+0x72>
		  if (rx_len > 0 && rxBuffer[rx_len - 1] == '\r') {
 800031e:	4b16      	ldr	r3, [pc, #88]	; (8000378 <main+0x94>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	dd13      	ble.n	800034e <main+0x6a>
 8000326:	4b14      	ldr	r3, [pc, #80]	; (8000378 <main+0x94>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	3b01      	subs	r3, #1
 800032c:	4a13      	ldr	r2, [pc, #76]	; (800037c <main+0x98>)
 800032e:	5cd3      	ldrb	r3, [r2, r3]
 8000330:	2b0d      	cmp	r3, #13
 8000332:	d10c      	bne.n	800034e <main+0x6a>
			  HAL_UART_Transmit(&huart1, rxBuffer, rx_len - 1, MAX_BUFFER_LENGTH);
 8000334:	4b10      	ldr	r3, [pc, #64]	; (8000378 <main+0x94>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	b29b      	uxth	r3, r3
 800033a:	3b01      	subs	r3, #1
 800033c:	b29a      	uxth	r2, r3
 800033e:	2364      	movs	r3, #100	; 0x64
 8000340:	490e      	ldr	r1, [pc, #56]	; (800037c <main+0x98>)
 8000342:	480c      	ldr	r0, [pc, #48]	; (8000374 <main+0x90>)
 8000344:	f001 fc24 	bl	8001b90 <HAL_UART_Transmit>
			  process_input();
 8000348:	f7ff ff9c 	bl	8000284 <process_input>
 800034c:	e00c      	b.n	8000368 <main+0x84>
		  } else {
			  rx_len = 0;
 800034e:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <main+0x94>)
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	e7d5      	b.n	8000302 <main+0x1e>
		  }
	  } else {
		  rxBuffer[rx_len++] = u1_ReceiveBit;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <main+0x94>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	1c5a      	adds	r2, r3, #1
 800035c:	4906      	ldr	r1, [pc, #24]	; (8000378 <main+0x94>)
 800035e:	600a      	str	r2, [r1, #0]
 8000360:	4a03      	ldr	r2, [pc, #12]	; (8000370 <main+0x8c>)
 8000362:	7811      	ldrb	r1, [r2, #0]
 8000364:	4a05      	ldr	r2, [pc, #20]	; (800037c <main+0x98>)
 8000366:	54d1      	strb	r1, [r2, r3]
	  while (HAL_UART_Receive(&huart1, &u1_ReceiveBit, 1, MAX_BUFFER_LENGTH) != HAL_OK);
 8000368:	e7cb      	b.n	8000302 <main+0x1e>
 800036a:	bf00      	nop
 800036c:	080033a4 	.word	0x080033a4
 8000370:	20000090 	.word	0x20000090
 8000374:	20000094 	.word	0x20000094
 8000378:	2000008c 	.word	0x2000008c
 800037c:	20000120 	.word	0x20000120

08000380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b090      	sub	sp, #64	; 0x40
 8000384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000386:	f107 0318 	add.w	r3, r7, #24
 800038a:	2228      	movs	r2, #40	; 0x28
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f001 fe94 	bl	80020bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
 80003a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003a2:	2301      	movs	r3, #1
 80003a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b0:	2301      	movs	r3, #1
 80003b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b4:	2302      	movs	r3, #2
 80003b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c4:	f107 0318 	add.w	r3, r7, #24
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 ff81 	bl	80012d0 <HAL_RCC_OscConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003d4:	f000 f884 	bl	80004e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d8:	230f      	movs	r3, #15
 80003da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003dc:	2302      	movs	r3, #2
 80003de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2102      	movs	r1, #2
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 f9ee 	bl	80017d4 <HAL_RCC_ClockConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003fe:	f000 f86f 	bl	80004e0 <Error_Handler>
  }
}
 8000402:	bf00      	nop
 8000404:	3740      	adds	r7, #64	; 0x40
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000412:	4a12      	ldr	r2, [pc, #72]	; (800045c <MX_USART1_UART_Init+0x50>)
 8000414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000416:	4b10      	ldr	r3, [pc, #64]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800041c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000432:	220c      	movs	r2, #12
 8000434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000436:	4b08      	ldr	r3, [pc, #32]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000442:	4805      	ldr	r0, [pc, #20]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000444:	f001 fb54 	bl	8001af0 <HAL_UART_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800044e:	f000 f847 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000094 	.word	0x20000094
 800045c:	40013800 	.word	0x40013800

08000460 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_DMA_Init+0x38>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <MX_DMA_Init+0x38>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_DMA_Init+0x38>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	2100      	movs	r1, #0
 8000482:	200f      	movs	r0, #15
 8000484:	f000 faa7 	bl	80009d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000488:	200f      	movs	r0, #15
 800048a:	f000 fac0 	bl	8000a0e <HAL_NVIC_EnableIRQ>

}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_GPIO_Init+0x40>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <MX_GPIO_Init+0x40>)
 80004a8:	f043 0320 	orr.w	r3, r3, #32
 80004ac:	6193      	str	r3, [r2, #24]
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <MX_GPIO_Init+0x40>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f003 0320 	and.w	r3, r3, #32
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <MX_GPIO_Init+0x40>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a07      	ldr	r2, [pc, #28]	; (80004dc <MX_GPIO_Init+0x40>)
 80004c0:	f043 0304 	orr.w	r3, r3, #4
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <MX_GPIO_Init+0x40>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0304 	and.w	r3, r3, #4
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	40021000 	.word	0x40021000

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <Error_Handler+0x8>
	...

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_MspInit+0x5c>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a14      	ldr	r2, [pc, #80]	; (8000548 <HAL_MspInit+0x5c>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_MspInit+0x5c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <HAL_MspInit+0x5c>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_MspInit+0x60>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <HAL_MspInit+0x60>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000
 800054c:	40010000 	.word	0x40010000

08000550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a2f      	ldr	r2, [pc, #188]	; (8000628 <HAL_UART_MspInit+0xd8>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d157      	bne.n	8000620 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000570:	4b2e      	ldr	r3, [pc, #184]	; (800062c <HAL_UART_MspInit+0xdc>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a2d      	ldr	r2, [pc, #180]	; (800062c <HAL_UART_MspInit+0xdc>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b2b      	ldr	r3, [pc, #172]	; (800062c <HAL_UART_MspInit+0xdc>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <HAL_UART_MspInit+0xdc>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a27      	ldr	r2, [pc, #156]	; (800062c <HAL_UART_MspInit+0xdc>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <HAL_UART_MspInit+0xdc>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a6:	2302      	movs	r3, #2
 80005a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005aa:	2303      	movs	r3, #3
 80005ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	4619      	mov	r1, r3
 80005b4:	481e      	ldr	r0, [pc, #120]	; (8000630 <HAL_UART_MspInit+0xe0>)
 80005b6:	f000 fcf7 	bl	8000fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	4818      	ldr	r0, [pc, #96]	; (8000630 <HAL_UART_MspInit+0xe0>)
 80005d0:	f000 fcea 	bl	8000fa8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <HAL_UART_MspInit+0xe4>)
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <HAL_UART_MspInit+0xe8>)
 80005d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <HAL_UART_MspInit+0xe4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <HAL_UART_MspInit+0xe4>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <HAL_UART_MspInit+0xe4>)
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <HAL_UART_MspInit+0xe4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <HAL_UART_MspInit+0xe4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <HAL_UART_MspInit+0xe4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <HAL_UART_MspInit+0xe4>)
 8000600:	2200      	movs	r2, #0
 8000602:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000604:	480b      	ldr	r0, [pc, #44]	; (8000634 <HAL_UART_MspInit+0xe4>)
 8000606:	f000 fa1d 	bl	8000a44 <HAL_DMA_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000610:	f7ff ff66 	bl	80004e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a07      	ldr	r2, [pc, #28]	; (8000634 <HAL_UART_MspInit+0xe4>)
 8000618:	63da      	str	r2, [r3, #60]	; 0x3c
 800061a:	4a06      	ldr	r2, [pc, #24]	; (8000634 <HAL_UART_MspInit+0xe4>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40013800 	.word	0x40013800
 800062c:	40021000 	.word	0x40021000
 8000630:	40010800 	.word	0x40010800
 8000634:	200000dc 	.word	0x200000dc
 8000638:	40020058 	.word	0x40020058

0800063c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <NMI_Handler+0x4>

08000642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000646:	e7fe      	b.n	8000646 <HardFault_Handler+0x4>

08000648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800064c:	e7fe      	b.n	800064c <MemManage_Handler+0x4>

0800064e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <BusFault_Handler+0x4>

08000654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <UsageFault_Handler+0x4>

0800065a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000682:	f000 f8b5 	bl	80007f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <DMA1_Channel5_IRQHandler+0x10>)
 8000692:	f000 fa4d 	bl	8000b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200000dc 	.word	0x200000dc

080006a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006a8:	4a14      	ldr	r2, [pc, #80]	; (80006fc <_sbrk+0x5c>)
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <_sbrk+0x60>)
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <_sbrk+0x64>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d102      	bne.n	80006c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <_sbrk+0x64>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <_sbrk+0x68>)
 80006c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <_sbrk+0x64>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d207      	bcs.n	80006e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d0:	f001 fcca 	bl	8002068 <__errno>
 80006d4:	4603      	mov	r3, r0
 80006d6:	220c      	movs	r2, #12
 80006d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	e009      	b.n	80006f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <_sbrk+0x64>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006e6:	4b07      	ldr	r3, [pc, #28]	; (8000704 <_sbrk+0x64>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4413      	add	r3, r2
 80006ee:	4a05      	ldr	r2, [pc, #20]	; (8000704 <_sbrk+0x64>)
 80006f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006f2:	68fb      	ldr	r3, [r7, #12]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000c000 	.word	0x2000c000
 8000700:	00000400 	.word	0x00000400
 8000704:	20000188 	.word	0x20000188
 8000708:	200001a0 	.word	0x200001a0

0800070c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000718:	f7ff fff8 	bl	800070c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800071e:	490c      	ldr	r1, [pc, #48]	; (8000750 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000724:	e002      	b.n	800072c <LoopCopyDataInit>

08000726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072a:	3304      	adds	r3, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800072c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000730:	d3f9      	bcc.n	8000726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000732:	4a09      	ldr	r2, [pc, #36]	; (8000758 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000734:	4c09      	ldr	r4, [pc, #36]	; (800075c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000738:	e001      	b.n	800073e <LoopFillZerobss>

0800073a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800073c:	3204      	adds	r2, #4

0800073e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000740:	d3fb      	bcc.n	800073a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000742:	f001 fc97 	bl	8002074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000746:	f7ff fdcd 	bl	80002e4 <main>
  bx lr
 800074a:	4770      	bx	lr
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000754:	080035c0 	.word	0x080035c0
  ldr r2, =_sbss
 8000758:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800075c:	200001a0 	.word	0x200001a0

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>
	...

08000764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_Init+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <HAL_Init+0x28>)
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000774:	2003      	movs	r0, #3
 8000776:	f000 f923 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077a:	200f      	movs	r0, #15
 800077c:	f000 f808 	bl	8000790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000780:	f7ff feb4 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40022000 	.word	0x40022000

08000790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_InitTick+0x54>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_InitTick+0x58>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f93b 	bl	8000a2a <HAL_SYSTICK_Config>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00e      	b.n	80007dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0f      	cmp	r3, #15
 80007c2:	d80a      	bhi.n	80007da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c4:	2200      	movs	r2, #0
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f000 f903 	bl	80009d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d0:	4a06      	ldr	r2, [pc, #24]	; (80007ec <HAL_InitTick+0x5c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e000      	b.n	80007dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000004 	.word	0x20000004

080007f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_IncTick+0x1c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_IncTick+0x20>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	4a03      	ldr	r2, [pc, #12]	; (8000810 <HAL_IncTick+0x20>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	20000008 	.word	0x20000008
 8000810:	2000018c 	.word	0x2000018c

08000814 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return uwTick;
 8000818:	4b02      	ldr	r3, [pc, #8]	; (8000824 <HAL_GetTick+0x10>)
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	2000018c 	.word	0x2000018c

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0b      	blt.n	80008b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f003 021f 	and.w	r2, r3, #31
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <__NVIC_EnableIRQ+0x34>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	095b      	lsrs	r3, r3, #5
 80008ac:	2001      	movs	r0, #1
 80008ae:	fa00 f202 	lsl.w	r2, r0, r2
 80008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	e000e100 	.word	0xe000e100

080008c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db0a      	blt.n	80008ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	490c      	ldr	r1, [pc, #48]	; (8000910 <__NVIC_SetPriority+0x4c>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	0112      	lsls	r2, r2, #4
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ec:	e00a      	b.n	8000904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4908      	ldr	r1, [pc, #32]	; (8000914 <__NVIC_SetPriority+0x50>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	3b04      	subs	r3, #4
 80008fc:	0112      	lsls	r2, r2, #4
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	440b      	add	r3, r1
 8000902:	761a      	strb	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000e100 	.word	0xe000e100
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f1c3 0307 	rsb	r3, r3, #7
 8000932:	2b04      	cmp	r3, #4
 8000934:	bf28      	it	cs
 8000936:	2304      	movcs	r3, #4
 8000938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3304      	adds	r3, #4
 800093e:	2b06      	cmp	r3, #6
 8000940:	d902      	bls.n	8000948 <NVIC_EncodePriority+0x30>
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3b03      	subs	r3, #3
 8000946:	e000      	b.n	800094a <NVIC_EncodePriority+0x32>
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	f04f 32ff 	mov.w	r2, #4294967295
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43da      	mvns	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000960:	f04f 31ff 	mov.w	r1, #4294967295
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	43d9      	mvns	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	4313      	orrs	r3, r2
         );
}
 8000972:	4618      	mov	r0, r3
 8000974:	3724      	adds	r7, #36	; 0x24
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800098c:	d301      	bcc.n	8000992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098e:	2301      	movs	r3, #1
 8000990:	e00f      	b.n	80009b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <SysTick_Config+0x40>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099a:	210f      	movs	r1, #15
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f7ff ff90 	bl	80008c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SysTick_Config+0x40>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <SysTick_Config+0x40>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff2d 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e8:	f7ff ff42 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f7ff ff90 	bl	8000918 <NVIC_EncodePriority>
 80009f8:	4602      	mov	r2, r0
 80009fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff5f 	bl	80008c4 <__NVIC_SetPriority>
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff35 	bl	800088c <__NVIC_EnableIRQ>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ffa2 	bl	800097c <SysTick_Config>
 8000a38:	4603      	mov	r3, r0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d101      	bne.n	8000a5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e059      	b.n	8000b0e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <HAL_DMA_Init+0xd4>)
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d80f      	bhi.n	8000a86 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <HAL_DMA_Init+0xd8>)
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a2b      	ldr	r2, [pc, #172]	; (8000b20 <HAL_DMA_Init+0xdc>)
 8000a72:	fba2 2303 	umull	r2, r3, r2, r3
 8000a76:	091b      	lsrs	r3, r3, #4
 8000a78:	009a      	lsls	r2, r3, #2
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a28      	ldr	r2, [pc, #160]	; (8000b24 <HAL_DMA_Init+0xe0>)
 8000a82:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a84:	e00e      	b.n	8000aa4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <HAL_DMA_Init+0xe4>)
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <HAL_DMA_Init+0xdc>)
 8000a92:	fba2 2303 	umull	r2, r3, r2, r3
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	009a      	lsls	r2, r3, #2
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <HAL_DMA_Init+0xe8>)
 8000aa2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000aba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000abe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ae0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2201      	movs	r2, #1
 8000b00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	40020407 	.word	0x40020407
 8000b1c:	bffdfff8 	.word	0xbffdfff8
 8000b20:	cccccccd 	.word	0xcccccccd
 8000b24:	40020000 	.word	0x40020000
 8000b28:	bffdfbf8 	.word	0xbffdfbf8
 8000b2c:	40020400 	.word	0x40020400

08000b30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4013      	ands	r3, r2
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f000 80f1 	beq.w	8000d3c <HAL_DMA_IRQHandler+0x20c>
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	f000 80eb 	beq.w	8000d3c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f003 0320 	and.w	r3, r3, #32
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d107      	bne.n	8000b84 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f022 0204 	bic.w	r2, r2, #4
 8000b82:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b5f      	ldr	r3, [pc, #380]	; (8000d08 <HAL_DMA_IRQHandler+0x1d8>)
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d958      	bls.n	8000c42 <HAL_DMA_IRQHandler+0x112>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a5d      	ldr	r2, [pc, #372]	; (8000d0c <HAL_DMA_IRQHandler+0x1dc>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d04f      	beq.n	8000c3a <HAL_DMA_IRQHandler+0x10a>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a5c      	ldr	r2, [pc, #368]	; (8000d10 <HAL_DMA_IRQHandler+0x1e0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d048      	beq.n	8000c36 <HAL_DMA_IRQHandler+0x106>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a5a      	ldr	r2, [pc, #360]	; (8000d14 <HAL_DMA_IRQHandler+0x1e4>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d040      	beq.n	8000c30 <HAL_DMA_IRQHandler+0x100>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a59      	ldr	r2, [pc, #356]	; (8000d18 <HAL_DMA_IRQHandler+0x1e8>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d038      	beq.n	8000c2a <HAL_DMA_IRQHandler+0xfa>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a57      	ldr	r2, [pc, #348]	; (8000d1c <HAL_DMA_IRQHandler+0x1ec>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d030      	beq.n	8000c24 <HAL_DMA_IRQHandler+0xf4>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a56      	ldr	r2, [pc, #344]	; (8000d20 <HAL_DMA_IRQHandler+0x1f0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d028      	beq.n	8000c1e <HAL_DMA_IRQHandler+0xee>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a4d      	ldr	r2, [pc, #308]	; (8000d08 <HAL_DMA_IRQHandler+0x1d8>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d020      	beq.n	8000c18 <HAL_DMA_IRQHandler+0xe8>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a52      	ldr	r2, [pc, #328]	; (8000d24 <HAL_DMA_IRQHandler+0x1f4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d019      	beq.n	8000c14 <HAL_DMA_IRQHandler+0xe4>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a50      	ldr	r2, [pc, #320]	; (8000d28 <HAL_DMA_IRQHandler+0x1f8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d012      	beq.n	8000c10 <HAL_DMA_IRQHandler+0xe0>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a4f      	ldr	r2, [pc, #316]	; (8000d2c <HAL_DMA_IRQHandler+0x1fc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d00a      	beq.n	8000c0a <HAL_DMA_IRQHandler+0xda>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a4d      	ldr	r2, [pc, #308]	; (8000d30 <HAL_DMA_IRQHandler+0x200>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d102      	bne.n	8000c04 <HAL_DMA_IRQHandler+0xd4>
 8000bfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c02:	e01b      	b.n	8000c3c <HAL_DMA_IRQHandler+0x10c>
 8000c04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c08:	e018      	b.n	8000c3c <HAL_DMA_IRQHandler+0x10c>
 8000c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0e:	e015      	b.n	8000c3c <HAL_DMA_IRQHandler+0x10c>
 8000c10:	2340      	movs	r3, #64	; 0x40
 8000c12:	e013      	b.n	8000c3c <HAL_DMA_IRQHandler+0x10c>
 8000c14:	2304      	movs	r3, #4
 8000c16:	e011      	b.n	8000c3c <HAL_DMA_IRQHandler+0x10c>
 8000c18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c1c:	e00e      	b.n	8000c3c <HAL_DMA_IRQHandler+0x10c>
 8000c1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c22:	e00b      	b.n	8000c3c <HAL_DMA_IRQHandler+0x10c>
 8000c24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c28:	e008      	b.n	8000c3c <HAL_DMA_IRQHandler+0x10c>
 8000c2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c2e:	e005      	b.n	8000c3c <HAL_DMA_IRQHandler+0x10c>
 8000c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c34:	e002      	b.n	8000c3c <HAL_DMA_IRQHandler+0x10c>
 8000c36:	2340      	movs	r3, #64	; 0x40
 8000c38:	e000      	b.n	8000c3c <HAL_DMA_IRQHandler+0x10c>
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	4a3d      	ldr	r2, [pc, #244]	; (8000d34 <HAL_DMA_IRQHandler+0x204>)
 8000c3e:	6053      	str	r3, [r2, #4]
 8000c40:	e057      	b.n	8000cf2 <HAL_DMA_IRQHandler+0x1c2>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a31      	ldr	r2, [pc, #196]	; (8000d0c <HAL_DMA_IRQHandler+0x1dc>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d04f      	beq.n	8000cec <HAL_DMA_IRQHandler+0x1bc>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a2f      	ldr	r2, [pc, #188]	; (8000d10 <HAL_DMA_IRQHandler+0x1e0>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d048      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0x1b8>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a2e      	ldr	r2, [pc, #184]	; (8000d14 <HAL_DMA_IRQHandler+0x1e4>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d040      	beq.n	8000ce2 <HAL_DMA_IRQHandler+0x1b2>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a2c      	ldr	r2, [pc, #176]	; (8000d18 <HAL_DMA_IRQHandler+0x1e8>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d038      	beq.n	8000cdc <HAL_DMA_IRQHandler+0x1ac>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a2b      	ldr	r2, [pc, #172]	; (8000d1c <HAL_DMA_IRQHandler+0x1ec>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d030      	beq.n	8000cd6 <HAL_DMA_IRQHandler+0x1a6>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a29      	ldr	r2, [pc, #164]	; (8000d20 <HAL_DMA_IRQHandler+0x1f0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d028      	beq.n	8000cd0 <HAL_DMA_IRQHandler+0x1a0>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a21      	ldr	r2, [pc, #132]	; (8000d08 <HAL_DMA_IRQHandler+0x1d8>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d020      	beq.n	8000cca <HAL_DMA_IRQHandler+0x19a>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a25      	ldr	r2, [pc, #148]	; (8000d24 <HAL_DMA_IRQHandler+0x1f4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d019      	beq.n	8000cc6 <HAL_DMA_IRQHandler+0x196>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a24      	ldr	r2, [pc, #144]	; (8000d28 <HAL_DMA_IRQHandler+0x1f8>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d012      	beq.n	8000cc2 <HAL_DMA_IRQHandler+0x192>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a22      	ldr	r2, [pc, #136]	; (8000d2c <HAL_DMA_IRQHandler+0x1fc>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d00a      	beq.n	8000cbc <HAL_DMA_IRQHandler+0x18c>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <HAL_DMA_IRQHandler+0x200>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d102      	bne.n	8000cb6 <HAL_DMA_IRQHandler+0x186>
 8000cb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cb4:	e01b      	b.n	8000cee <HAL_DMA_IRQHandler+0x1be>
 8000cb6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000cba:	e018      	b.n	8000cee <HAL_DMA_IRQHandler+0x1be>
 8000cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc0:	e015      	b.n	8000cee <HAL_DMA_IRQHandler+0x1be>
 8000cc2:	2340      	movs	r3, #64	; 0x40
 8000cc4:	e013      	b.n	8000cee <HAL_DMA_IRQHandler+0x1be>
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	e011      	b.n	8000cee <HAL_DMA_IRQHandler+0x1be>
 8000cca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000cce:	e00e      	b.n	8000cee <HAL_DMA_IRQHandler+0x1be>
 8000cd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cd4:	e00b      	b.n	8000cee <HAL_DMA_IRQHandler+0x1be>
 8000cd6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000cda:	e008      	b.n	8000cee <HAL_DMA_IRQHandler+0x1be>
 8000cdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ce0:	e005      	b.n	8000cee <HAL_DMA_IRQHandler+0x1be>
 8000ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce6:	e002      	b.n	8000cee <HAL_DMA_IRQHandler+0x1be>
 8000ce8:	2340      	movs	r3, #64	; 0x40
 8000cea:	e000      	b.n	8000cee <HAL_DMA_IRQHandler+0x1be>
 8000cec:	2304      	movs	r3, #4
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <HAL_DMA_IRQHandler+0x208>)
 8000cf0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 8136 	beq.w	8000f68 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d04:	e130      	b.n	8000f68 <HAL_DMA_IRQHandler+0x438>
 8000d06:	bf00      	nop
 8000d08:	40020080 	.word	0x40020080
 8000d0c:	40020008 	.word	0x40020008
 8000d10:	4002001c 	.word	0x4002001c
 8000d14:	40020030 	.word	0x40020030
 8000d18:	40020044 	.word	0x40020044
 8000d1c:	40020058 	.word	0x40020058
 8000d20:	4002006c 	.word	0x4002006c
 8000d24:	40020408 	.word	0x40020408
 8000d28:	4002041c 	.word	0x4002041c
 8000d2c:	40020430 	.word	0x40020430
 8000d30:	40020444 	.word	0x40020444
 8000d34:	40020400 	.word	0x40020400
 8000d38:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	2202      	movs	r2, #2
 8000d42:	409a      	lsls	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4013      	ands	r3, r2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 80dd 	beq.w	8000f08 <HAL_DMA_IRQHandler+0x3d8>
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80d7 	beq.w	8000f08 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0320 	and.w	r3, r3, #32
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10b      	bne.n	8000d80 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 020a 	bic.w	r2, r2, #10
 8000d76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b7b      	ldr	r3, [pc, #492]	; (8000f74 <HAL_DMA_IRQHandler+0x444>)
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d958      	bls.n	8000e3e <HAL_DMA_IRQHandler+0x30e>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a79      	ldr	r2, [pc, #484]	; (8000f78 <HAL_DMA_IRQHandler+0x448>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d04f      	beq.n	8000e36 <HAL_DMA_IRQHandler+0x306>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a78      	ldr	r2, [pc, #480]	; (8000f7c <HAL_DMA_IRQHandler+0x44c>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d048      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x302>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a76      	ldr	r2, [pc, #472]	; (8000f80 <HAL_DMA_IRQHandler+0x450>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d040      	beq.n	8000e2c <HAL_DMA_IRQHandler+0x2fc>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a75      	ldr	r2, [pc, #468]	; (8000f84 <HAL_DMA_IRQHandler+0x454>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d038      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x2f6>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a73      	ldr	r2, [pc, #460]	; (8000f88 <HAL_DMA_IRQHandler+0x458>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d030      	beq.n	8000e20 <HAL_DMA_IRQHandler+0x2f0>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a72      	ldr	r2, [pc, #456]	; (8000f8c <HAL_DMA_IRQHandler+0x45c>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d028      	beq.n	8000e1a <HAL_DMA_IRQHandler+0x2ea>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a69      	ldr	r2, [pc, #420]	; (8000f74 <HAL_DMA_IRQHandler+0x444>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d020      	beq.n	8000e14 <HAL_DMA_IRQHandler+0x2e4>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a6e      	ldr	r2, [pc, #440]	; (8000f90 <HAL_DMA_IRQHandler+0x460>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d019      	beq.n	8000e10 <HAL_DMA_IRQHandler+0x2e0>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a6c      	ldr	r2, [pc, #432]	; (8000f94 <HAL_DMA_IRQHandler+0x464>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d012      	beq.n	8000e0c <HAL_DMA_IRQHandler+0x2dc>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a6b      	ldr	r2, [pc, #428]	; (8000f98 <HAL_DMA_IRQHandler+0x468>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d00a      	beq.n	8000e06 <HAL_DMA_IRQHandler+0x2d6>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a69      	ldr	r2, [pc, #420]	; (8000f9c <HAL_DMA_IRQHandler+0x46c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d102      	bne.n	8000e00 <HAL_DMA_IRQHandler+0x2d0>
 8000dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfe:	e01b      	b.n	8000e38 <HAL_DMA_IRQHandler+0x308>
 8000e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e04:	e018      	b.n	8000e38 <HAL_DMA_IRQHandler+0x308>
 8000e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e0a:	e015      	b.n	8000e38 <HAL_DMA_IRQHandler+0x308>
 8000e0c:	2320      	movs	r3, #32
 8000e0e:	e013      	b.n	8000e38 <HAL_DMA_IRQHandler+0x308>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e011      	b.n	8000e38 <HAL_DMA_IRQHandler+0x308>
 8000e14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e18:	e00e      	b.n	8000e38 <HAL_DMA_IRQHandler+0x308>
 8000e1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e1e:	e00b      	b.n	8000e38 <HAL_DMA_IRQHandler+0x308>
 8000e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e24:	e008      	b.n	8000e38 <HAL_DMA_IRQHandler+0x308>
 8000e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2a:	e005      	b.n	8000e38 <HAL_DMA_IRQHandler+0x308>
 8000e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e30:	e002      	b.n	8000e38 <HAL_DMA_IRQHandler+0x308>
 8000e32:	2320      	movs	r3, #32
 8000e34:	e000      	b.n	8000e38 <HAL_DMA_IRQHandler+0x308>
 8000e36:	2302      	movs	r3, #2
 8000e38:	4a59      	ldr	r2, [pc, #356]	; (8000fa0 <HAL_DMA_IRQHandler+0x470>)
 8000e3a:	6053      	str	r3, [r2, #4]
 8000e3c:	e057      	b.n	8000eee <HAL_DMA_IRQHandler+0x3be>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a4d      	ldr	r2, [pc, #308]	; (8000f78 <HAL_DMA_IRQHandler+0x448>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d04f      	beq.n	8000ee8 <HAL_DMA_IRQHandler+0x3b8>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a4b      	ldr	r2, [pc, #300]	; (8000f7c <HAL_DMA_IRQHandler+0x44c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d048      	beq.n	8000ee4 <HAL_DMA_IRQHandler+0x3b4>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a4a      	ldr	r2, [pc, #296]	; (8000f80 <HAL_DMA_IRQHandler+0x450>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d040      	beq.n	8000ede <HAL_DMA_IRQHandler+0x3ae>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a48      	ldr	r2, [pc, #288]	; (8000f84 <HAL_DMA_IRQHandler+0x454>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d038      	beq.n	8000ed8 <HAL_DMA_IRQHandler+0x3a8>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a47      	ldr	r2, [pc, #284]	; (8000f88 <HAL_DMA_IRQHandler+0x458>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d030      	beq.n	8000ed2 <HAL_DMA_IRQHandler+0x3a2>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a45      	ldr	r2, [pc, #276]	; (8000f8c <HAL_DMA_IRQHandler+0x45c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d028      	beq.n	8000ecc <HAL_DMA_IRQHandler+0x39c>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a3d      	ldr	r2, [pc, #244]	; (8000f74 <HAL_DMA_IRQHandler+0x444>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d020      	beq.n	8000ec6 <HAL_DMA_IRQHandler+0x396>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a41      	ldr	r2, [pc, #260]	; (8000f90 <HAL_DMA_IRQHandler+0x460>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d019      	beq.n	8000ec2 <HAL_DMA_IRQHandler+0x392>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a40      	ldr	r2, [pc, #256]	; (8000f94 <HAL_DMA_IRQHandler+0x464>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d012      	beq.n	8000ebe <HAL_DMA_IRQHandler+0x38e>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a3e      	ldr	r2, [pc, #248]	; (8000f98 <HAL_DMA_IRQHandler+0x468>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00a      	beq.n	8000eb8 <HAL_DMA_IRQHandler+0x388>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a3d      	ldr	r2, [pc, #244]	; (8000f9c <HAL_DMA_IRQHandler+0x46c>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d102      	bne.n	8000eb2 <HAL_DMA_IRQHandler+0x382>
 8000eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb0:	e01b      	b.n	8000eea <HAL_DMA_IRQHandler+0x3ba>
 8000eb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb6:	e018      	b.n	8000eea <HAL_DMA_IRQHandler+0x3ba>
 8000eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ebc:	e015      	b.n	8000eea <HAL_DMA_IRQHandler+0x3ba>
 8000ebe:	2320      	movs	r3, #32
 8000ec0:	e013      	b.n	8000eea <HAL_DMA_IRQHandler+0x3ba>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e011      	b.n	8000eea <HAL_DMA_IRQHandler+0x3ba>
 8000ec6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eca:	e00e      	b.n	8000eea <HAL_DMA_IRQHandler+0x3ba>
 8000ecc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ed0:	e00b      	b.n	8000eea <HAL_DMA_IRQHandler+0x3ba>
 8000ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed6:	e008      	b.n	8000eea <HAL_DMA_IRQHandler+0x3ba>
 8000ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000edc:	e005      	b.n	8000eea <HAL_DMA_IRQHandler+0x3ba>
 8000ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee2:	e002      	b.n	8000eea <HAL_DMA_IRQHandler+0x3ba>
 8000ee4:	2320      	movs	r3, #32
 8000ee6:	e000      	b.n	8000eea <HAL_DMA_IRQHandler+0x3ba>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	4a2e      	ldr	r2, [pc, #184]	; (8000fa4 <HAL_DMA_IRQHandler+0x474>)
 8000eec:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d034      	beq.n	8000f68 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f06:	e02f      	b.n	8000f68 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d028      	beq.n	8000f6a <HAL_DMA_IRQHandler+0x43a>
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d023      	beq.n	8000f6a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 020e 	bic.w	r2, r2, #14
 8000f30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f40:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d004      	beq.n	8000f6a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	4798      	blx	r3
    }
  }
  return;
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
}
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020080 	.word	0x40020080
 8000f78:	40020008 	.word	0x40020008
 8000f7c:	4002001c 	.word	0x4002001c
 8000f80:	40020030 	.word	0x40020030
 8000f84:	40020044 	.word	0x40020044
 8000f88:	40020058 	.word	0x40020058
 8000f8c:	4002006c 	.word	0x4002006c
 8000f90:	40020408 	.word	0x40020408
 8000f94:	4002041c 	.word	0x4002041c
 8000f98:	40020430 	.word	0x40020430
 8000f9c:	40020444 	.word	0x40020444
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b08b      	sub	sp, #44	; 0x2c
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fba:	e179      	b.n	80012b0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	f040 8168 	bne.w	80012aa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	4a96      	ldr	r2, [pc, #600]	; (8001238 <HAL_GPIO_Init+0x290>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d05e      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
 8000fe4:	4a94      	ldr	r2, [pc, #592]	; (8001238 <HAL_GPIO_Init+0x290>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d875      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 8000fea:	4a94      	ldr	r2, [pc, #592]	; (800123c <HAL_GPIO_Init+0x294>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d058      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
 8000ff0:	4a92      	ldr	r2, [pc, #584]	; (800123c <HAL_GPIO_Init+0x294>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d86f      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 8000ff6:	4a92      	ldr	r2, [pc, #584]	; (8001240 <HAL_GPIO_Init+0x298>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d052      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
 8000ffc:	4a90      	ldr	r2, [pc, #576]	; (8001240 <HAL_GPIO_Init+0x298>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d869      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 8001002:	4a90      	ldr	r2, [pc, #576]	; (8001244 <HAL_GPIO_Init+0x29c>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d04c      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
 8001008:	4a8e      	ldr	r2, [pc, #568]	; (8001244 <HAL_GPIO_Init+0x29c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d863      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 800100e:	4a8e      	ldr	r2, [pc, #568]	; (8001248 <HAL_GPIO_Init+0x2a0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d046      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
 8001014:	4a8c      	ldr	r2, [pc, #560]	; (8001248 <HAL_GPIO_Init+0x2a0>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d85d      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 800101a:	2b12      	cmp	r3, #18
 800101c:	d82a      	bhi.n	8001074 <HAL_GPIO_Init+0xcc>
 800101e:	2b12      	cmp	r3, #18
 8001020:	d859      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 8001022:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <HAL_GPIO_Init+0x80>)
 8001024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001028:	080010a3 	.word	0x080010a3
 800102c:	0800107d 	.word	0x0800107d
 8001030:	0800108f 	.word	0x0800108f
 8001034:	080010d1 	.word	0x080010d1
 8001038:	080010d7 	.word	0x080010d7
 800103c:	080010d7 	.word	0x080010d7
 8001040:	080010d7 	.word	0x080010d7
 8001044:	080010d7 	.word	0x080010d7
 8001048:	080010d7 	.word	0x080010d7
 800104c:	080010d7 	.word	0x080010d7
 8001050:	080010d7 	.word	0x080010d7
 8001054:	080010d7 	.word	0x080010d7
 8001058:	080010d7 	.word	0x080010d7
 800105c:	080010d7 	.word	0x080010d7
 8001060:	080010d7 	.word	0x080010d7
 8001064:	080010d7 	.word	0x080010d7
 8001068:	080010d7 	.word	0x080010d7
 800106c:	08001085 	.word	0x08001085
 8001070:	08001099 	.word	0x08001099
 8001074:	4a75      	ldr	r2, [pc, #468]	; (800124c <HAL_GPIO_Init+0x2a4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800107a:	e02c      	b.n	80010d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	623b      	str	r3, [r7, #32]
          break;
 8001082:	e029      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	3304      	adds	r3, #4
 800108a:	623b      	str	r3, [r7, #32]
          break;
 800108c:	e024      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	3308      	adds	r3, #8
 8001094:	623b      	str	r3, [r7, #32]
          break;
 8001096:	e01f      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	330c      	adds	r3, #12
 800109e:	623b      	str	r3, [r7, #32]
          break;
 80010a0:	e01a      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010aa:	2304      	movs	r3, #4
 80010ac:	623b      	str	r3, [r7, #32]
          break;
 80010ae:	e013      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d105      	bne.n	80010c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b8:	2308      	movs	r3, #8
 80010ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	611a      	str	r2, [r3, #16]
          break;
 80010c2:	e009      	b.n	80010d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c4:	2308      	movs	r3, #8
 80010c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	615a      	str	r2, [r3, #20]
          break;
 80010ce:	e003      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
          break;
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          break;
 80010d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	2bff      	cmp	r3, #255	; 0xff
 80010dc:	d801      	bhi.n	80010e2 <HAL_GPIO_Init+0x13a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	e001      	b.n	80010e6 <HAL_GPIO_Init+0x13e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3304      	adds	r3, #4
 80010e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	2bff      	cmp	r3, #255	; 0xff
 80010ec:	d802      	bhi.n	80010f4 <HAL_GPIO_Init+0x14c>
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	e002      	b.n	80010fa <HAL_GPIO_Init+0x152>
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	3b08      	subs	r3, #8
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	210f      	movs	r1, #15
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	401a      	ands	r2, r3
 800110c:	6a39      	ldr	r1, [r7, #32]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	431a      	orrs	r2, r3
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 80c1 	beq.w	80012aa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001128:	4b49      	ldr	r3, [pc, #292]	; (8001250 <HAL_GPIO_Init+0x2a8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a48      	ldr	r2, [pc, #288]	; (8001250 <HAL_GPIO_Init+0x2a8>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b46      	ldr	r3, [pc, #280]	; (8001250 <HAL_GPIO_Init+0x2a8>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001140:	4a44      	ldr	r2, [pc, #272]	; (8001254 <HAL_GPIO_Init+0x2ac>)
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a3c      	ldr	r2, [pc, #240]	; (8001258 <HAL_GPIO_Init+0x2b0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d01f      	beq.n	80011ac <HAL_GPIO_Init+0x204>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a3b      	ldr	r2, [pc, #236]	; (800125c <HAL_GPIO_Init+0x2b4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d019      	beq.n	80011a8 <HAL_GPIO_Init+0x200>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a3a      	ldr	r2, [pc, #232]	; (8001260 <HAL_GPIO_Init+0x2b8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d013      	beq.n	80011a4 <HAL_GPIO_Init+0x1fc>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a39      	ldr	r2, [pc, #228]	; (8001264 <HAL_GPIO_Init+0x2bc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d00d      	beq.n	80011a0 <HAL_GPIO_Init+0x1f8>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a38      	ldr	r2, [pc, #224]	; (8001268 <HAL_GPIO_Init+0x2c0>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d007      	beq.n	800119c <HAL_GPIO_Init+0x1f4>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a37      	ldr	r2, [pc, #220]	; (800126c <HAL_GPIO_Init+0x2c4>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d101      	bne.n	8001198 <HAL_GPIO_Init+0x1f0>
 8001194:	2305      	movs	r3, #5
 8001196:	e00a      	b.n	80011ae <HAL_GPIO_Init+0x206>
 8001198:	2306      	movs	r3, #6
 800119a:	e008      	b.n	80011ae <HAL_GPIO_Init+0x206>
 800119c:	2304      	movs	r3, #4
 800119e:	e006      	b.n	80011ae <HAL_GPIO_Init+0x206>
 80011a0:	2303      	movs	r3, #3
 80011a2:	e004      	b.n	80011ae <HAL_GPIO_Init+0x206>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e002      	b.n	80011ae <HAL_GPIO_Init+0x206>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <HAL_GPIO_Init+0x206>
 80011ac:	2300      	movs	r3, #0
 80011ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b0:	f002 0203 	and.w	r2, r2, #3
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	4093      	lsls	r3, r2
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011be:	4925      	ldr	r1, [pc, #148]	; (8001254 <HAL_GPIO_Init+0x2ac>)
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <HAL_GPIO_Init+0x2c8>)
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	4924      	ldr	r1, [pc, #144]	; (8001270 <HAL_GPIO_Init+0x2c8>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	608b      	str	r3, [r1, #8]
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <HAL_GPIO_Init+0x2c8>)
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4920      	ldr	r1, [pc, #128]	; (8001270 <HAL_GPIO_Init+0x2c8>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_GPIO_Init+0x2c8>)
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	491a      	ldr	r1, [pc, #104]	; (8001270 <HAL_GPIO_Init+0x2c8>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	60cb      	str	r3, [r1, #12]
 800120c:	e006      	b.n	800121c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_GPIO_Init+0x2c8>)
 8001210:	68da      	ldr	r2, [r3, #12]
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	43db      	mvns	r3, r3
 8001216:	4916      	ldr	r1, [pc, #88]	; (8001270 <HAL_GPIO_Init+0x2c8>)
 8001218:	4013      	ands	r3, r2
 800121a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d025      	beq.n	8001274 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_GPIO_Init+0x2c8>)
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4910      	ldr	r1, [pc, #64]	; (8001270 <HAL_GPIO_Init+0x2c8>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	604b      	str	r3, [r1, #4]
 8001234:	e025      	b.n	8001282 <HAL_GPIO_Init+0x2da>
 8001236:	bf00      	nop
 8001238:	10320000 	.word	0x10320000
 800123c:	10310000 	.word	0x10310000
 8001240:	10220000 	.word	0x10220000
 8001244:	10210000 	.word	0x10210000
 8001248:	10120000 	.word	0x10120000
 800124c:	10110000 	.word	0x10110000
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000
 8001258:	40010800 	.word	0x40010800
 800125c:	40010c00 	.word	0x40010c00
 8001260:	40011000 	.word	0x40011000
 8001264:	40011400 	.word	0x40011400
 8001268:	40011800 	.word	0x40011800
 800126c:	40011c00 	.word	0x40011c00
 8001270:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_GPIO_Init+0x324>)
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	43db      	mvns	r3, r3
 800127c:	4913      	ldr	r1, [pc, #76]	; (80012cc <HAL_GPIO_Init+0x324>)
 800127e:	4013      	ands	r3, r2
 8001280:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d006      	beq.n	800129c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_GPIO_Init+0x324>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	490e      	ldr	r1, [pc, #56]	; (80012cc <HAL_GPIO_Init+0x324>)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
 800129a:	e006      	b.n	80012aa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_GPIO_Init+0x324>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	4909      	ldr	r1, [pc, #36]	; (80012cc <HAL_GPIO_Init+0x324>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	3301      	adds	r3, #1
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f47f ae7e 	bne.w	8000fbc <HAL_GPIO_Init+0x14>
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	372c      	adds	r7, #44	; 0x2c
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e272      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8087 	beq.w	80013fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f0:	4b92      	ldr	r3, [pc, #584]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 030c 	and.w	r3, r3, #12
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d00c      	beq.n	8001316 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012fc:	4b8f      	ldr	r3, [pc, #572]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d112      	bne.n	800132e <HAL_RCC_OscConfig+0x5e>
 8001308:	4b8c      	ldr	r3, [pc, #560]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001314:	d10b      	bne.n	800132e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001316:	4b89      	ldr	r3, [pc, #548]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d06c      	beq.n	80013fc <HAL_RCC_OscConfig+0x12c>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d168      	bne.n	80013fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e24c      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001336:	d106      	bne.n	8001346 <HAL_RCC_OscConfig+0x76>
 8001338:	4b80      	ldr	r3, [pc, #512]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a7f      	ldr	r2, [pc, #508]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e02e      	b.n	80013a4 <HAL_RCC_OscConfig+0xd4>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x98>
 800134e:	4b7b      	ldr	r3, [pc, #492]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a7a      	ldr	r2, [pc, #488]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b78      	ldr	r3, [pc, #480]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a77      	ldr	r2, [pc, #476]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e01d      	b.n	80013a4 <HAL_RCC_OscConfig+0xd4>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0xbc>
 8001372:	4b72      	ldr	r3, [pc, #456]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a71      	ldr	r2, [pc, #452]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b6f      	ldr	r3, [pc, #444]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a6e      	ldr	r2, [pc, #440]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e00b      	b.n	80013a4 <HAL_RCC_OscConfig+0xd4>
 800138c:	4b6b      	ldr	r3, [pc, #428]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a6a      	ldr	r2, [pc, #424]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b68      	ldr	r3, [pc, #416]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a67      	ldr	r2, [pc, #412]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800139e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fa32 	bl	8000814 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fa2e 	bl	8000814 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e200      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b5d      	ldr	r3, [pc, #372]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0xe4>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fa1e 	bl	8000814 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fa1a 	bl	8000814 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1ec      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	4b53      	ldr	r3, [pc, #332]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x10c>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d063      	beq.n	80014d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800140a:	4b4c      	ldr	r3, [pc, #304]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001416:	4b49      	ldr	r3, [pc, #292]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b08      	cmp	r3, #8
 8001420:	d11c      	bne.n	800145c <HAL_RCC_OscConfig+0x18c>
 8001422:	4b46      	ldr	r3, [pc, #280]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d116      	bne.n	800145c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	4b43      	ldr	r3, [pc, #268]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x176>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d001      	beq.n	8001446 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e1c0      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4939      	ldr	r1, [pc, #228]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	e03a      	b.n	80014d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001464:	4b36      	ldr	r3, [pc, #216]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff f9d3 	bl	8000814 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff f9cf 	bl	8000814 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e1a1      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4927      	ldr	r1, [pc, #156]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
 80014a4:	e015      	b.n	80014d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a6:	4b26      	ldr	r3, [pc, #152]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff f9b2 	bl	8000814 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b4:	f7ff f9ae 	bl	8000814 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e180      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d03a      	beq.n	8001554 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d019      	beq.n	800151a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_RCC_OscConfig+0x274>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff f992 	bl	8000814 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff f98e 	bl	8000814 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e160      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001512:	2001      	movs	r0, #1
 8001514:	f000 face 	bl	8001ab4 <RCC_Delay>
 8001518:	e01c      	b.n	8001554 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_RCC_OscConfig+0x274>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001520:	f7ff f978 	bl	8000814 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001526:	e00f      	b.n	8001548 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001528:	f7ff f974 	bl	8000814 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d908      	bls.n	8001548 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e146      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	42420000 	.word	0x42420000
 8001544:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001548:	4b92      	ldr	r3, [pc, #584]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e9      	bne.n	8001528 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80a6 	beq.w	80016ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001566:	4b8b      	ldr	r3, [pc, #556]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10d      	bne.n	800158e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b88      	ldr	r3, [pc, #544]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a87      	ldr	r2, [pc, #540]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b85      	ldr	r3, [pc, #532]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158a:	2301      	movs	r3, #1
 800158c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	4b82      	ldr	r3, [pc, #520]	; (8001798 <HAL_RCC_OscConfig+0x4c8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d118      	bne.n	80015cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159a:	4b7f      	ldr	r3, [pc, #508]	; (8001798 <HAL_RCC_OscConfig+0x4c8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a7e      	ldr	r2, [pc, #504]	; (8001798 <HAL_RCC_OscConfig+0x4c8>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a6:	f7ff f935 	bl	8000814 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7ff f931 	bl	8000814 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b64      	cmp	r3, #100	; 0x64
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e103      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	4b75      	ldr	r3, [pc, #468]	; (8001798 <HAL_RCC_OscConfig+0x4c8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x312>
 80015d4:	4b6f      	ldr	r3, [pc, #444]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4a6e      	ldr	r2, [pc, #440]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6213      	str	r3, [r2, #32]
 80015e0:	e02d      	b.n	800163e <HAL_RCC_OscConfig+0x36e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x334>
 80015ea:	4b6a      	ldr	r3, [pc, #424]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4a69      	ldr	r2, [pc, #420]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6213      	str	r3, [r2, #32]
 80015f6:	4b67      	ldr	r3, [pc, #412]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4a66      	ldr	r2, [pc, #408]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	f023 0304 	bic.w	r3, r3, #4
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	e01c      	b.n	800163e <HAL_RCC_OscConfig+0x36e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b05      	cmp	r3, #5
 800160a:	d10c      	bne.n	8001626 <HAL_RCC_OscConfig+0x356>
 800160c:	4b61      	ldr	r3, [pc, #388]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4a60      	ldr	r2, [pc, #384]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	6213      	str	r3, [r2, #32]
 8001618:	4b5e      	ldr	r3, [pc, #376]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4a5d      	ldr	r2, [pc, #372]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6213      	str	r3, [r2, #32]
 8001624:	e00b      	b.n	800163e <HAL_RCC_OscConfig+0x36e>
 8001626:	4b5b      	ldr	r3, [pc, #364]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4a5a      	ldr	r2, [pc, #360]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	6213      	str	r3, [r2, #32]
 8001632:	4b58      	ldr	r3, [pc, #352]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a57      	ldr	r2, [pc, #348]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	f023 0304 	bic.w	r3, r3, #4
 800163c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d015      	beq.n	8001672 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff f8e5 	bl	8000814 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff f8e1 	bl	8000814 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	; 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e0b1      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001664:	4b4b      	ldr	r3, [pc, #300]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0ee      	beq.n	800164e <HAL_RCC_OscConfig+0x37e>
 8001670:	e014      	b.n	800169c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001672:	f7ff f8cf 	bl	8000814 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001678:	e00a      	b.n	8001690 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f7ff f8cb 	bl	8000814 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	; 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e09b      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001690:	4b40      	ldr	r3, [pc, #256]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1ee      	bne.n	800167a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d105      	bne.n	80016ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a2:	4b3c      	ldr	r3, [pc, #240]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a3b      	ldr	r2, [pc, #236]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8087 	beq.w	80017c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b8:	4b36      	ldr	r3, [pc, #216]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d061      	beq.n	8001788 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d146      	bne.n	800175a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016cc:	4b33      	ldr	r3, [pc, #204]	; (800179c <HAL_RCC_OscConfig+0x4cc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff f89f 	bl	8000814 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff f89b 	bl	8000814 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e06d      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f0      	bne.n	80016da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001700:	d108      	bne.n	8001714 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	4921      	ldr	r1, [pc, #132]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a19      	ldr	r1, [r3, #32]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	430b      	orrs	r3, r1
 8001726:	491b      	ldr	r1, [pc, #108]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_RCC_OscConfig+0x4cc>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff f86f 	bl	8000814 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173a:	f7ff f86b 	bl	8000814 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e03d      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x46a>
 8001758:	e035      	b.n	80017c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_RCC_OscConfig+0x4cc>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff f858 	bl	8000814 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff f854 	bl	8000814 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e026      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x498>
 8001786:	e01e      	b.n	80017c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d107      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e019      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
 8001794:	40021000 	.word	0x40021000
 8001798:	40007000 	.word	0x40007000
 800179c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_RCC_OscConfig+0x500>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0d0      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b6a      	ldr	r3, [pc, #424]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d910      	bls.n	8001818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b67      	ldr	r3, [pc, #412]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 0207 	bic.w	r2, r3, #7
 80017fe:	4965      	ldr	r1, [pc, #404]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b63      	ldr	r3, [pc, #396]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0b8      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001830:	4b59      	ldr	r3, [pc, #356]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a58      	ldr	r2, [pc, #352]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800183a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a52      	ldr	r2, [pc, #328]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001854:	4b50      	ldr	r3, [pc, #320]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	494d      	ldr	r1, [pc, #308]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	4313      	orrs	r3, r2
 8001864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d040      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d115      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e07f      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001892:	4b41      	ldr	r3, [pc, #260]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e073      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e06b      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f023 0203 	bic.w	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4936      	ldr	r1, [pc, #216]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c4:	f7fe ffa6 	bl	8000814 <HAL_GetTick>
 80018c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018cc:	f7fe ffa2 	bl	8000814 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e053      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 020c 	and.w	r2, r3, #12
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d1eb      	bne.n	80018cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d210      	bcs.n	8001924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 0207 	bic.w	r2, r3, #7
 800190a:	4922      	ldr	r1, [pc, #136]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e032      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4916      	ldr	r1, [pc, #88]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	4313      	orrs	r3, r2
 8001940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	490e      	ldr	r1, [pc, #56]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	4313      	orrs	r3, r2
 8001960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001962:	f000 f821 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8001966:	4602      	mov	r2, r0
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	490a      	ldr	r1, [pc, #40]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 8001974:	5ccb      	ldrb	r3, [r1, r3]
 8001976:	fa22 f303 	lsr.w	r3, r2, r3
 800197a:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <HAL_RCC_ClockConfig+0x1cc>)
 800197c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe ff04 	bl	8000790 <HAL_InitTick>

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40022000 	.word	0x40022000
 8001998:	40021000 	.word	0x40021000
 800199c:	080033dc 	.word	0x080033dc
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000004 	.word	0x20000004

080019a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019c2:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d002      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x30>
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d003      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x36>
 80019d6:	e027      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x98>)
 80019da:	613b      	str	r3, [r7, #16]
      break;
 80019dc:	e027      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	0c9b      	lsrs	r3, r3, #18
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019e8:	5cd3      	ldrb	r3, [r2, r3]
 80019ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d010      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	0c5b      	lsrs	r3, r3, #17
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a02:	5cd3      	ldrb	r3, [r2, r3]
 8001a04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a0a:	fb03 f202 	mul.w	r2, r3, r2
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e004      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a0c      	ldr	r2, [pc, #48]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a1c:	fb02 f303 	mul.w	r3, r2, r3
 8001a20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	613b      	str	r3, [r7, #16]
      break;
 8001a26:	e002      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a2a:	613b      	str	r3, [r7, #16]
      break;
 8001a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2e:	693b      	ldr	r3, [r7, #16]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	007a1200 	.word	0x007a1200
 8001a44:	080033f4 	.word	0x080033f4
 8001a48:	08003404 	.word	0x08003404
 8001a4c:	003d0900 	.word	0x003d0900

08001a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a54:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	20000000 	.word	0x20000000

08001a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a68:	f7ff fff2 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	4903      	ldr	r1, [pc, #12]	; (8001a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a7a:	5ccb      	ldrb	r3, [r1, r3]
 8001a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	080033ec 	.word	0x080033ec

08001a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a90:	f7ff ffde 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a94:	4602      	mov	r2, r0
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	0adb      	lsrs	r3, r3, #11
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	4903      	ldr	r1, [pc, #12]	; (8001ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aa2:	5ccb      	ldrb	r3, [r1, r3]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	080033ec 	.word	0x080033ec

08001ab4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <RCC_Delay+0x34>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <RCC_Delay+0x38>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	0a5b      	lsrs	r3, r3, #9
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	fb02 f303 	mul.w	r3, r2, r3
 8001ace:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ad0:	bf00      	nop
  }
  while (Delay --);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1e5a      	subs	r2, r3, #1
 8001ad6:	60fa      	str	r2, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f9      	bne.n	8001ad0 <RCC_Delay+0x1c>
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	10624dd3 	.word	0x10624dd3

08001af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e042      	b.n	8001b88 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe fd1a 	bl	8000550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2224      	movs	r2, #36	; 0x24
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 fa09 	bl	8001f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2220      	movs	r2, #32
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d175      	bne.n	8001c9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <HAL_UART_Transmit+0x2c>
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e06e      	b.n	8001c9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2221      	movs	r2, #33	; 0x21
 8001bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bce:	f7fe fe21 	bl	8000814 <HAL_GetTick>
 8001bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	88fa      	ldrh	r2, [r7, #6]
 8001bd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	88fa      	ldrh	r2, [r7, #6]
 8001bde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001be8:	d108      	bne.n	8001bfc <HAL_UART_Transmit+0x6c>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d104      	bne.n	8001bfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	e003      	b.n	8001c04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c04:	e02e      	b.n	8001c64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2180      	movs	r1, #128	; 0x80
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f8df 	bl	8001dd4 <UART_WaitOnFlagUntilTimeout>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e03a      	b.n	8001c9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10b      	bne.n	8001c46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	3302      	adds	r3, #2
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	e007      	b.n	8001c56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	3301      	adds	r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1cb      	bne.n	8001c06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2200      	movs	r2, #0
 8001c76:	2140      	movs	r1, #64	; 0x40
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f8ab 	bl	8001dd4 <UART_WaitOnFlagUntilTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e006      	b.n	8001c9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e000      	b.n	8001c9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c9c:	2302      	movs	r3, #2
  }
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3720      	adds	r7, #32
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b08a      	sub	sp, #40	; 0x28
 8001caa:	af02      	add	r7, sp, #8
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	f040 8081 	bne.w	8001dca <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <HAL_UART_Receive+0x2e>
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e079      	b.n	8001dcc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2222      	movs	r2, #34	; 0x22
 8001ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cec:	f7fe fd92 	bl	8000814 <HAL_GetTick>
 8001cf0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	88fa      	ldrh	r2, [r7, #6]
 8001cf6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	88fa      	ldrh	r2, [r7, #6]
 8001cfc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d06:	d108      	bne.n	8001d1a <HAL_UART_Receive+0x74>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d104      	bne.n	8001d1a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	e003      	b.n	8001d22 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d22:	e047      	b.n	8001db4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2120      	movs	r1, #32
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f850 	bl	8001dd4 <UART_WaitOnFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e042      	b.n	8001dcc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10c      	bne.n	8001d66 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	3302      	adds	r3, #2
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	e01f      	b.n	8001da6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d6e:	d007      	beq.n	8001d80 <HAL_UART_Receive+0xda>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10a      	bne.n	8001d8e <HAL_UART_Receive+0xe8>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d106      	bne.n	8001d8e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	701a      	strb	r2, [r3, #0]
 8001d8c:	e008      	b.n	8001da0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	3301      	adds	r3, #1
 8001da4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1b2      	bne.n	8001d24 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001dca:	2302      	movs	r3, #2
  }
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	4613      	mov	r3, r2
 8001de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001de4:	e03b      	b.n	8001e5e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d037      	beq.n	8001e5e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dee:	f7fe fd11 	bl	8000814 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	6a3a      	ldr	r2, [r7, #32]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d302      	bcc.n	8001e04 <UART_WaitOnFlagUntilTimeout+0x30>
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e03a      	b.n	8001e7e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d023      	beq.n	8001e5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b80      	cmp	r3, #128	; 0x80
 8001e1a:	d020      	beq.n	8001e5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b40      	cmp	r3, #64	; 0x40
 8001e20:	d01d      	beq.n	8001e5e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d116      	bne.n	8001e5e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f81d 	bl	8001e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2208      	movs	r2, #8
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4013      	ands	r3, r2
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	bf0c      	ite	eq
 8001e6e:	2301      	moveq	r3, #1
 8001e70:	2300      	movne	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d0b4      	beq.n	8001de6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b095      	sub	sp, #84	; 0x54
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	330c      	adds	r3, #12
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e98:	e853 3f00 	ldrex	r3, [r3]
 8001e9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	330c      	adds	r3, #12
 8001eac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001eae:	643a      	str	r2, [r7, #64]	; 0x40
 8001eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001eb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001eb6:	e841 2300 	strex	r3, r2, [r1]
 8001eba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1e5      	bne.n	8001e8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	3314      	adds	r3, #20
 8001ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	e853 3f00 	ldrex	r3, [r3]
 8001ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3314      	adds	r3, #20
 8001ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eea:	e841 2300 	strex	r3, r2, [r1]
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1e5      	bne.n	8001ec2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d119      	bne.n	8001f32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	330c      	adds	r3, #12
 8001f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	e853 3f00 	ldrex	r3, [r3]
 8001f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f023 0310 	bic.w	r3, r3, #16
 8001f14:	647b      	str	r3, [r7, #68]	; 0x44
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	330c      	adds	r3, #12
 8001f1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f1e:	61ba      	str	r2, [r7, #24]
 8001f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f22:	6979      	ldr	r1, [r7, #20]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	e841 2300 	strex	r3, r2, [r1]
 8001f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1e5      	bne.n	8001efe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001f40:	bf00      	nop
 8001f42:	3754      	adds	r7, #84	; 0x54
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
	...

08001f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f86:	f023 030c 	bic.w	r3, r3, #12
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a2c      	ldr	r2, [pc, #176]	; (8002060 <UART_SetConfig+0x114>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d103      	bne.n	8001fbc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fb4:	f7ff fd6a 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	e002      	b.n	8001fc2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fbc:	f7ff fd52 	bl	8001a64 <HAL_RCC_GetPCLK1Freq>
 8001fc0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	009a      	lsls	r2, r3, #2
 8001fcc:	441a      	add	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd8:	4a22      	ldr	r2, [pc, #136]	; (8002064 <UART_SetConfig+0x118>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	0119      	lsls	r1, r3, #4
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	009a      	lsls	r2, r3, #2
 8001fec:	441a      	add	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <UART_SetConfig+0x118>)
 8001ffa:	fba3 0302 	umull	r0, r3, r3, r2
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2064      	movs	r0, #100	; 0x64
 8002002:	fb00 f303 	mul.w	r3, r0, r3
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	3332      	adds	r3, #50	; 0x32
 800200c:	4a15      	ldr	r2, [pc, #84]	; (8002064 <UART_SetConfig+0x118>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002018:	4419      	add	r1, r3
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	009a      	lsls	r2, r3, #2
 8002024:	441a      	add	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <UART_SetConfig+0x118>)
 8002032:	fba3 0302 	umull	r0, r3, r3, r2
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	2064      	movs	r0, #100	; 0x64
 800203a:	fb00 f303 	mul.w	r3, r0, r3
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	3332      	adds	r3, #50	; 0x32
 8002044:	4a07      	ldr	r2, [pc, #28]	; (8002064 <UART_SetConfig+0x118>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	f003 020f 	and.w	r2, r3, #15
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	440a      	add	r2, r1
 8002056:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40013800 	.word	0x40013800
 8002064:	51eb851f 	.word	0x51eb851f

08002068 <__errno>:
 8002068:	4b01      	ldr	r3, [pc, #4]	; (8002070 <__errno+0x8>)
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	2000000c 	.word	0x2000000c

08002074 <__libc_init_array>:
 8002074:	b570      	push	{r4, r5, r6, lr}
 8002076:	2600      	movs	r6, #0
 8002078:	4d0c      	ldr	r5, [pc, #48]	; (80020ac <__libc_init_array+0x38>)
 800207a:	4c0d      	ldr	r4, [pc, #52]	; (80020b0 <__libc_init_array+0x3c>)
 800207c:	1b64      	subs	r4, r4, r5
 800207e:	10a4      	asrs	r4, r4, #2
 8002080:	42a6      	cmp	r6, r4
 8002082:	d109      	bne.n	8002098 <__libc_init_array+0x24>
 8002084:	f001 f950 	bl	8003328 <_init>
 8002088:	2600      	movs	r6, #0
 800208a:	4d0a      	ldr	r5, [pc, #40]	; (80020b4 <__libc_init_array+0x40>)
 800208c:	4c0a      	ldr	r4, [pc, #40]	; (80020b8 <__libc_init_array+0x44>)
 800208e:	1b64      	subs	r4, r4, r5
 8002090:	10a4      	asrs	r4, r4, #2
 8002092:	42a6      	cmp	r6, r4
 8002094:	d105      	bne.n	80020a2 <__libc_init_array+0x2e>
 8002096:	bd70      	pop	{r4, r5, r6, pc}
 8002098:	f855 3b04 	ldr.w	r3, [r5], #4
 800209c:	4798      	blx	r3
 800209e:	3601      	adds	r6, #1
 80020a0:	e7ee      	b.n	8002080 <__libc_init_array+0xc>
 80020a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020a6:	4798      	blx	r3
 80020a8:	3601      	adds	r6, #1
 80020aa:	e7f2      	b.n	8002092 <__libc_init_array+0x1e>
 80020ac:	080035b8 	.word	0x080035b8
 80020b0:	080035b8 	.word	0x080035b8
 80020b4:	080035b8 	.word	0x080035b8
 80020b8:	080035bc 	.word	0x080035bc

080020bc <memset>:
 80020bc:	4603      	mov	r3, r0
 80020be:	4402      	add	r2, r0
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d100      	bne.n	80020c6 <memset+0xa>
 80020c4:	4770      	bx	lr
 80020c6:	f803 1b01 	strb.w	r1, [r3], #1
 80020ca:	e7f9      	b.n	80020c0 <memset+0x4>

080020cc <siscanf>:
 80020cc:	b40e      	push	{r1, r2, r3}
 80020ce:	f44f 7201 	mov.w	r2, #516	; 0x204
 80020d2:	b530      	push	{r4, r5, lr}
 80020d4:	b09c      	sub	sp, #112	; 0x70
 80020d6:	ac1f      	add	r4, sp, #124	; 0x7c
 80020d8:	f854 5b04 	ldr.w	r5, [r4], #4
 80020dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80020e0:	9002      	str	r0, [sp, #8]
 80020e2:	9006      	str	r0, [sp, #24]
 80020e4:	f7fe f89e 	bl	8000224 <strlen>
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <siscanf+0x4c>)
 80020ea:	9003      	str	r0, [sp, #12]
 80020ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80020ee:	2300      	movs	r3, #0
 80020f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80020f2:	9314      	str	r3, [sp, #80]	; 0x50
 80020f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f8:	9007      	str	r0, [sp, #28]
 80020fa:	4808      	ldr	r0, [pc, #32]	; (800211c <siscanf+0x50>)
 80020fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002100:	462a      	mov	r2, r5
 8002102:	4623      	mov	r3, r4
 8002104:	a902      	add	r1, sp, #8
 8002106:	6800      	ldr	r0, [r0, #0]
 8002108:	9401      	str	r4, [sp, #4]
 800210a:	f000 f9e1 	bl	80024d0 <__ssvfiscanf_r>
 800210e:	b01c      	add	sp, #112	; 0x70
 8002110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002114:	b003      	add	sp, #12
 8002116:	4770      	bx	lr
 8002118:	08002121 	.word	0x08002121
 800211c:	2000000c 	.word	0x2000000c

08002120 <__seofread>:
 8002120:	2000      	movs	r0, #0
 8002122:	4770      	bx	lr

08002124 <_vsiprintf_r>:
 8002124:	b500      	push	{lr}
 8002126:	b09b      	sub	sp, #108	; 0x6c
 8002128:	9100      	str	r1, [sp, #0]
 800212a:	9104      	str	r1, [sp, #16]
 800212c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002130:	9105      	str	r1, [sp, #20]
 8002132:	9102      	str	r1, [sp, #8]
 8002134:	4905      	ldr	r1, [pc, #20]	; (800214c <_vsiprintf_r+0x28>)
 8002136:	9103      	str	r1, [sp, #12]
 8002138:	4669      	mov	r1, sp
 800213a:	f000 f86f 	bl	800221c <_svfiprintf_r>
 800213e:	2200      	movs	r2, #0
 8002140:	9b00      	ldr	r3, [sp, #0]
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	b01b      	add	sp, #108	; 0x6c
 8002146:	f85d fb04 	ldr.w	pc, [sp], #4
 800214a:	bf00      	nop
 800214c:	ffff0208 	.word	0xffff0208

08002150 <vsiprintf>:
 8002150:	4613      	mov	r3, r2
 8002152:	460a      	mov	r2, r1
 8002154:	4601      	mov	r1, r0
 8002156:	4802      	ldr	r0, [pc, #8]	; (8002160 <vsiprintf+0x10>)
 8002158:	6800      	ldr	r0, [r0, #0]
 800215a:	f7ff bfe3 	b.w	8002124 <_vsiprintf_r>
 800215e:	bf00      	nop
 8002160:	2000000c 	.word	0x2000000c

08002164 <__ssputs_r>:
 8002164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002168:	688e      	ldr	r6, [r1, #8]
 800216a:	4682      	mov	sl, r0
 800216c:	429e      	cmp	r6, r3
 800216e:	460c      	mov	r4, r1
 8002170:	4690      	mov	r8, r2
 8002172:	461f      	mov	r7, r3
 8002174:	d838      	bhi.n	80021e8 <__ssputs_r+0x84>
 8002176:	898a      	ldrh	r2, [r1, #12]
 8002178:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800217c:	d032      	beq.n	80021e4 <__ssputs_r+0x80>
 800217e:	6825      	ldr	r5, [r4, #0]
 8002180:	6909      	ldr	r1, [r1, #16]
 8002182:	3301      	adds	r3, #1
 8002184:	eba5 0901 	sub.w	r9, r5, r1
 8002188:	6965      	ldr	r5, [r4, #20]
 800218a:	444b      	add	r3, r9
 800218c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002190:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002194:	106d      	asrs	r5, r5, #1
 8002196:	429d      	cmp	r5, r3
 8002198:	bf38      	it	cc
 800219a:	461d      	movcc	r5, r3
 800219c:	0553      	lsls	r3, r2, #21
 800219e:	d531      	bpl.n	8002204 <__ssputs_r+0xa0>
 80021a0:	4629      	mov	r1, r5
 80021a2:	f000 fff9 	bl	8003198 <_malloc_r>
 80021a6:	4606      	mov	r6, r0
 80021a8:	b950      	cbnz	r0, 80021c0 <__ssputs_r+0x5c>
 80021aa:	230c      	movs	r3, #12
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f8ca 3000 	str.w	r3, [sl]
 80021b4:	89a3      	ldrh	r3, [r4, #12]
 80021b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ba:	81a3      	strh	r3, [r4, #12]
 80021bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021c0:	464a      	mov	r2, r9
 80021c2:	6921      	ldr	r1, [r4, #16]
 80021c4:	f000 ff58 	bl	8003078 <memcpy>
 80021c8:	89a3      	ldrh	r3, [r4, #12]
 80021ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80021ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d2:	81a3      	strh	r3, [r4, #12]
 80021d4:	6126      	str	r6, [r4, #16]
 80021d6:	444e      	add	r6, r9
 80021d8:	6026      	str	r6, [r4, #0]
 80021da:	463e      	mov	r6, r7
 80021dc:	6165      	str	r5, [r4, #20]
 80021de:	eba5 0509 	sub.w	r5, r5, r9
 80021e2:	60a5      	str	r5, [r4, #8]
 80021e4:	42be      	cmp	r6, r7
 80021e6:	d900      	bls.n	80021ea <__ssputs_r+0x86>
 80021e8:	463e      	mov	r6, r7
 80021ea:	4632      	mov	r2, r6
 80021ec:	4641      	mov	r1, r8
 80021ee:	6820      	ldr	r0, [r4, #0]
 80021f0:	f000 ff50 	bl	8003094 <memmove>
 80021f4:	68a3      	ldr	r3, [r4, #8]
 80021f6:	2000      	movs	r0, #0
 80021f8:	1b9b      	subs	r3, r3, r6
 80021fa:	60a3      	str	r3, [r4, #8]
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	4433      	add	r3, r6
 8002200:	6023      	str	r3, [r4, #0]
 8002202:	e7db      	b.n	80021bc <__ssputs_r+0x58>
 8002204:	462a      	mov	r2, r5
 8002206:	f001 f83b 	bl	8003280 <_realloc_r>
 800220a:	4606      	mov	r6, r0
 800220c:	2800      	cmp	r0, #0
 800220e:	d1e1      	bne.n	80021d4 <__ssputs_r+0x70>
 8002210:	4650      	mov	r0, sl
 8002212:	6921      	ldr	r1, [r4, #16]
 8002214:	f000 ff58 	bl	80030c8 <_free_r>
 8002218:	e7c7      	b.n	80021aa <__ssputs_r+0x46>
	...

0800221c <_svfiprintf_r>:
 800221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002220:	4698      	mov	r8, r3
 8002222:	898b      	ldrh	r3, [r1, #12]
 8002224:	4607      	mov	r7, r0
 8002226:	061b      	lsls	r3, r3, #24
 8002228:	460d      	mov	r5, r1
 800222a:	4614      	mov	r4, r2
 800222c:	b09d      	sub	sp, #116	; 0x74
 800222e:	d50e      	bpl.n	800224e <_svfiprintf_r+0x32>
 8002230:	690b      	ldr	r3, [r1, #16]
 8002232:	b963      	cbnz	r3, 800224e <_svfiprintf_r+0x32>
 8002234:	2140      	movs	r1, #64	; 0x40
 8002236:	f000 ffaf 	bl	8003198 <_malloc_r>
 800223a:	6028      	str	r0, [r5, #0]
 800223c:	6128      	str	r0, [r5, #16]
 800223e:	b920      	cbnz	r0, 800224a <_svfiprintf_r+0x2e>
 8002240:	230c      	movs	r3, #12
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	e0d1      	b.n	80023ee <_svfiprintf_r+0x1d2>
 800224a:	2340      	movs	r3, #64	; 0x40
 800224c:	616b      	str	r3, [r5, #20]
 800224e:	2300      	movs	r3, #0
 8002250:	9309      	str	r3, [sp, #36]	; 0x24
 8002252:	2320      	movs	r3, #32
 8002254:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002258:	2330      	movs	r3, #48	; 0x30
 800225a:	f04f 0901 	mov.w	r9, #1
 800225e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002262:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002408 <_svfiprintf_r+0x1ec>
 8002266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800226a:	4623      	mov	r3, r4
 800226c:	469a      	mov	sl, r3
 800226e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002272:	b10a      	cbz	r2, 8002278 <_svfiprintf_r+0x5c>
 8002274:	2a25      	cmp	r2, #37	; 0x25
 8002276:	d1f9      	bne.n	800226c <_svfiprintf_r+0x50>
 8002278:	ebba 0b04 	subs.w	fp, sl, r4
 800227c:	d00b      	beq.n	8002296 <_svfiprintf_r+0x7a>
 800227e:	465b      	mov	r3, fp
 8002280:	4622      	mov	r2, r4
 8002282:	4629      	mov	r1, r5
 8002284:	4638      	mov	r0, r7
 8002286:	f7ff ff6d 	bl	8002164 <__ssputs_r>
 800228a:	3001      	adds	r0, #1
 800228c:	f000 80aa 	beq.w	80023e4 <_svfiprintf_r+0x1c8>
 8002290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002292:	445a      	add	r2, fp
 8002294:	9209      	str	r2, [sp, #36]	; 0x24
 8002296:	f89a 3000 	ldrb.w	r3, [sl]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 80a2 	beq.w	80023e4 <_svfiprintf_r+0x1c8>
 80022a0:	2300      	movs	r3, #0
 80022a2:	f04f 32ff 	mov.w	r2, #4294967295
 80022a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80022aa:	f10a 0a01 	add.w	sl, sl, #1
 80022ae:	9304      	str	r3, [sp, #16]
 80022b0:	9307      	str	r3, [sp, #28]
 80022b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80022b6:	931a      	str	r3, [sp, #104]	; 0x68
 80022b8:	4654      	mov	r4, sl
 80022ba:	2205      	movs	r2, #5
 80022bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022c0:	4851      	ldr	r0, [pc, #324]	; (8002408 <_svfiprintf_r+0x1ec>)
 80022c2:	f000 fecb 	bl	800305c <memchr>
 80022c6:	9a04      	ldr	r2, [sp, #16]
 80022c8:	b9d8      	cbnz	r0, 8002302 <_svfiprintf_r+0xe6>
 80022ca:	06d0      	lsls	r0, r2, #27
 80022cc:	bf44      	itt	mi
 80022ce:	2320      	movmi	r3, #32
 80022d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022d4:	0711      	lsls	r1, r2, #28
 80022d6:	bf44      	itt	mi
 80022d8:	232b      	movmi	r3, #43	; 0x2b
 80022da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022de:	f89a 3000 	ldrb.w	r3, [sl]
 80022e2:	2b2a      	cmp	r3, #42	; 0x2a
 80022e4:	d015      	beq.n	8002312 <_svfiprintf_r+0xf6>
 80022e6:	4654      	mov	r4, sl
 80022e8:	2000      	movs	r0, #0
 80022ea:	f04f 0c0a 	mov.w	ip, #10
 80022ee:	9a07      	ldr	r2, [sp, #28]
 80022f0:	4621      	mov	r1, r4
 80022f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022f6:	3b30      	subs	r3, #48	; 0x30
 80022f8:	2b09      	cmp	r3, #9
 80022fa:	d94e      	bls.n	800239a <_svfiprintf_r+0x17e>
 80022fc:	b1b0      	cbz	r0, 800232c <_svfiprintf_r+0x110>
 80022fe:	9207      	str	r2, [sp, #28]
 8002300:	e014      	b.n	800232c <_svfiprintf_r+0x110>
 8002302:	eba0 0308 	sub.w	r3, r0, r8
 8002306:	fa09 f303 	lsl.w	r3, r9, r3
 800230a:	4313      	orrs	r3, r2
 800230c:	46a2      	mov	sl, r4
 800230e:	9304      	str	r3, [sp, #16]
 8002310:	e7d2      	b.n	80022b8 <_svfiprintf_r+0x9c>
 8002312:	9b03      	ldr	r3, [sp, #12]
 8002314:	1d19      	adds	r1, r3, #4
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	9103      	str	r1, [sp, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	bfbb      	ittet	lt
 800231e:	425b      	neglt	r3, r3
 8002320:	f042 0202 	orrlt.w	r2, r2, #2
 8002324:	9307      	strge	r3, [sp, #28]
 8002326:	9307      	strlt	r3, [sp, #28]
 8002328:	bfb8      	it	lt
 800232a:	9204      	strlt	r2, [sp, #16]
 800232c:	7823      	ldrb	r3, [r4, #0]
 800232e:	2b2e      	cmp	r3, #46	; 0x2e
 8002330:	d10c      	bne.n	800234c <_svfiprintf_r+0x130>
 8002332:	7863      	ldrb	r3, [r4, #1]
 8002334:	2b2a      	cmp	r3, #42	; 0x2a
 8002336:	d135      	bne.n	80023a4 <_svfiprintf_r+0x188>
 8002338:	9b03      	ldr	r3, [sp, #12]
 800233a:	3402      	adds	r4, #2
 800233c:	1d1a      	adds	r2, r3, #4
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	9203      	str	r2, [sp, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	bfb8      	it	lt
 8002346:	f04f 33ff 	movlt.w	r3, #4294967295
 800234a:	9305      	str	r3, [sp, #20]
 800234c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800240c <_svfiprintf_r+0x1f0>
 8002350:	2203      	movs	r2, #3
 8002352:	4650      	mov	r0, sl
 8002354:	7821      	ldrb	r1, [r4, #0]
 8002356:	f000 fe81 	bl	800305c <memchr>
 800235a:	b140      	cbz	r0, 800236e <_svfiprintf_r+0x152>
 800235c:	2340      	movs	r3, #64	; 0x40
 800235e:	eba0 000a 	sub.w	r0, r0, sl
 8002362:	fa03 f000 	lsl.w	r0, r3, r0
 8002366:	9b04      	ldr	r3, [sp, #16]
 8002368:	3401      	adds	r4, #1
 800236a:	4303      	orrs	r3, r0
 800236c:	9304      	str	r3, [sp, #16]
 800236e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002372:	2206      	movs	r2, #6
 8002374:	4826      	ldr	r0, [pc, #152]	; (8002410 <_svfiprintf_r+0x1f4>)
 8002376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800237a:	f000 fe6f 	bl	800305c <memchr>
 800237e:	2800      	cmp	r0, #0
 8002380:	d038      	beq.n	80023f4 <_svfiprintf_r+0x1d8>
 8002382:	4b24      	ldr	r3, [pc, #144]	; (8002414 <_svfiprintf_r+0x1f8>)
 8002384:	bb1b      	cbnz	r3, 80023ce <_svfiprintf_r+0x1b2>
 8002386:	9b03      	ldr	r3, [sp, #12]
 8002388:	3307      	adds	r3, #7
 800238a:	f023 0307 	bic.w	r3, r3, #7
 800238e:	3308      	adds	r3, #8
 8002390:	9303      	str	r3, [sp, #12]
 8002392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002394:	4433      	add	r3, r6
 8002396:	9309      	str	r3, [sp, #36]	; 0x24
 8002398:	e767      	b.n	800226a <_svfiprintf_r+0x4e>
 800239a:	460c      	mov	r4, r1
 800239c:	2001      	movs	r0, #1
 800239e:	fb0c 3202 	mla	r2, ip, r2, r3
 80023a2:	e7a5      	b.n	80022f0 <_svfiprintf_r+0xd4>
 80023a4:	2300      	movs	r3, #0
 80023a6:	f04f 0c0a 	mov.w	ip, #10
 80023aa:	4619      	mov	r1, r3
 80023ac:	3401      	adds	r4, #1
 80023ae:	9305      	str	r3, [sp, #20]
 80023b0:	4620      	mov	r0, r4
 80023b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80023b6:	3a30      	subs	r2, #48	; 0x30
 80023b8:	2a09      	cmp	r2, #9
 80023ba:	d903      	bls.n	80023c4 <_svfiprintf_r+0x1a8>
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0c5      	beq.n	800234c <_svfiprintf_r+0x130>
 80023c0:	9105      	str	r1, [sp, #20]
 80023c2:	e7c3      	b.n	800234c <_svfiprintf_r+0x130>
 80023c4:	4604      	mov	r4, r0
 80023c6:	2301      	movs	r3, #1
 80023c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80023cc:	e7f0      	b.n	80023b0 <_svfiprintf_r+0x194>
 80023ce:	ab03      	add	r3, sp, #12
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	462a      	mov	r2, r5
 80023d4:	4638      	mov	r0, r7
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <_svfiprintf_r+0x1fc>)
 80023d8:	a904      	add	r1, sp, #16
 80023da:	f3af 8000 	nop.w
 80023de:	1c42      	adds	r2, r0, #1
 80023e0:	4606      	mov	r6, r0
 80023e2:	d1d6      	bne.n	8002392 <_svfiprintf_r+0x176>
 80023e4:	89ab      	ldrh	r3, [r5, #12]
 80023e6:	065b      	lsls	r3, r3, #25
 80023e8:	f53f af2c 	bmi.w	8002244 <_svfiprintf_r+0x28>
 80023ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023ee:	b01d      	add	sp, #116	; 0x74
 80023f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023f4:	ab03      	add	r3, sp, #12
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	462a      	mov	r2, r5
 80023fa:	4638      	mov	r0, r7
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <_svfiprintf_r+0x1fc>)
 80023fe:	a904      	add	r1, sp, #16
 8002400:	f000 fa50 	bl	80028a4 <_printf_i>
 8002404:	e7eb      	b.n	80023de <_svfiprintf_r+0x1c2>
 8002406:	bf00      	nop
 8002408:	08003406 	.word	0x08003406
 800240c:	0800340c 	.word	0x0800340c
 8002410:	08003410 	.word	0x08003410
 8002414:	00000000 	.word	0x00000000
 8002418:	08002165 	.word	0x08002165

0800241c <_sungetc_r>:
 800241c:	b538      	push	{r3, r4, r5, lr}
 800241e:	1c4b      	adds	r3, r1, #1
 8002420:	4614      	mov	r4, r2
 8002422:	d103      	bne.n	800242c <_sungetc_r+0x10>
 8002424:	f04f 35ff 	mov.w	r5, #4294967295
 8002428:	4628      	mov	r0, r5
 800242a:	bd38      	pop	{r3, r4, r5, pc}
 800242c:	8993      	ldrh	r3, [r2, #12]
 800242e:	b2cd      	uxtb	r5, r1
 8002430:	f023 0320 	bic.w	r3, r3, #32
 8002434:	8193      	strh	r3, [r2, #12]
 8002436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002438:	6852      	ldr	r2, [r2, #4]
 800243a:	b18b      	cbz	r3, 8002460 <_sungetc_r+0x44>
 800243c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800243e:	4293      	cmp	r3, r2
 8002440:	dd08      	ble.n	8002454 <_sungetc_r+0x38>
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	1e5a      	subs	r2, r3, #1
 8002446:	6022      	str	r2, [r4, #0]
 8002448:	f803 5c01 	strb.w	r5, [r3, #-1]
 800244c:	6863      	ldr	r3, [r4, #4]
 800244e:	3301      	adds	r3, #1
 8002450:	6063      	str	r3, [r4, #4]
 8002452:	e7e9      	b.n	8002428 <_sungetc_r+0xc>
 8002454:	4621      	mov	r1, r4
 8002456:	f000 fdc7 	bl	8002fe8 <__submore>
 800245a:	2800      	cmp	r0, #0
 800245c:	d0f1      	beq.n	8002442 <_sungetc_r+0x26>
 800245e:	e7e1      	b.n	8002424 <_sungetc_r+0x8>
 8002460:	6921      	ldr	r1, [r4, #16]
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	b151      	cbz	r1, 800247c <_sungetc_r+0x60>
 8002466:	4299      	cmp	r1, r3
 8002468:	d208      	bcs.n	800247c <_sungetc_r+0x60>
 800246a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800246e:	42a9      	cmp	r1, r5
 8002470:	d104      	bne.n	800247c <_sungetc_r+0x60>
 8002472:	3b01      	subs	r3, #1
 8002474:	3201      	adds	r2, #1
 8002476:	6023      	str	r3, [r4, #0]
 8002478:	6062      	str	r2, [r4, #4]
 800247a:	e7d5      	b.n	8002428 <_sungetc_r+0xc>
 800247c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8002480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002484:	6363      	str	r3, [r4, #52]	; 0x34
 8002486:	2303      	movs	r3, #3
 8002488:	63a3      	str	r3, [r4, #56]	; 0x38
 800248a:	4623      	mov	r3, r4
 800248c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002490:	6023      	str	r3, [r4, #0]
 8002492:	2301      	movs	r3, #1
 8002494:	e7dc      	b.n	8002450 <_sungetc_r+0x34>

08002496 <__ssrefill_r>:
 8002496:	b510      	push	{r4, lr}
 8002498:	460c      	mov	r4, r1
 800249a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800249c:	b169      	cbz	r1, 80024ba <__ssrefill_r+0x24>
 800249e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024a2:	4299      	cmp	r1, r3
 80024a4:	d001      	beq.n	80024aa <__ssrefill_r+0x14>
 80024a6:	f000 fe0f 	bl	80030c8 <_free_r>
 80024aa:	2000      	movs	r0, #0
 80024ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024ae:	6360      	str	r0, [r4, #52]	; 0x34
 80024b0:	6063      	str	r3, [r4, #4]
 80024b2:	b113      	cbz	r3, 80024ba <__ssrefill_r+0x24>
 80024b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024b6:	6023      	str	r3, [r4, #0]
 80024b8:	bd10      	pop	{r4, pc}
 80024ba:	6923      	ldr	r3, [r4, #16]
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	6023      	str	r3, [r4, #0]
 80024c2:	2300      	movs	r3, #0
 80024c4:	6063      	str	r3, [r4, #4]
 80024c6:	89a3      	ldrh	r3, [r4, #12]
 80024c8:	f043 0320 	orr.w	r3, r3, #32
 80024cc:	81a3      	strh	r3, [r4, #12]
 80024ce:	e7f3      	b.n	80024b8 <__ssrefill_r+0x22>

080024d0 <__ssvfiscanf_r>:
 80024d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024d4:	460c      	mov	r4, r1
 80024d6:	2100      	movs	r1, #0
 80024d8:	4606      	mov	r6, r0
 80024da:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80024de:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80024e2:	49a7      	ldr	r1, [pc, #668]	; (8002780 <__ssvfiscanf_r+0x2b0>)
 80024e4:	f10d 0804 	add.w	r8, sp, #4
 80024e8:	91a0      	str	r1, [sp, #640]	; 0x280
 80024ea:	49a6      	ldr	r1, [pc, #664]	; (8002784 <__ssvfiscanf_r+0x2b4>)
 80024ec:	4fa6      	ldr	r7, [pc, #664]	; (8002788 <__ssvfiscanf_r+0x2b8>)
 80024ee:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800278c <__ssvfiscanf_r+0x2bc>
 80024f2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80024f6:	91a1      	str	r1, [sp, #644]	; 0x284
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	7813      	ldrb	r3, [r2, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 815c 	beq.w	80027ba <__ssvfiscanf_r+0x2ea>
 8002502:	5dd9      	ldrb	r1, [r3, r7]
 8002504:	1c55      	adds	r5, r2, #1
 8002506:	f011 0108 	ands.w	r1, r1, #8
 800250a:	d019      	beq.n	8002540 <__ssvfiscanf_r+0x70>
 800250c:	6863      	ldr	r3, [r4, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	dd0f      	ble.n	8002532 <__ssvfiscanf_r+0x62>
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	5cba      	ldrb	r2, [r7, r2]
 8002518:	0712      	lsls	r2, r2, #28
 800251a:	d401      	bmi.n	8002520 <__ssvfiscanf_r+0x50>
 800251c:	462a      	mov	r2, r5
 800251e:	e7ec      	b.n	80024fa <__ssvfiscanf_r+0x2a>
 8002520:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002522:	3301      	adds	r3, #1
 8002524:	3201      	adds	r2, #1
 8002526:	9245      	str	r2, [sp, #276]	; 0x114
 8002528:	6862      	ldr	r2, [r4, #4]
 800252a:	6023      	str	r3, [r4, #0]
 800252c:	3a01      	subs	r2, #1
 800252e:	6062      	str	r2, [r4, #4]
 8002530:	e7ec      	b.n	800250c <__ssvfiscanf_r+0x3c>
 8002532:	4621      	mov	r1, r4
 8002534:	4630      	mov	r0, r6
 8002536:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002538:	4798      	blx	r3
 800253a:	2800      	cmp	r0, #0
 800253c:	d0e9      	beq.n	8002512 <__ssvfiscanf_r+0x42>
 800253e:	e7ed      	b.n	800251c <__ssvfiscanf_r+0x4c>
 8002540:	2b25      	cmp	r3, #37	; 0x25
 8002542:	d012      	beq.n	800256a <__ssvfiscanf_r+0x9a>
 8002544:	469a      	mov	sl, r3
 8002546:	6863      	ldr	r3, [r4, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	f340 8094 	ble.w	8002676 <__ssvfiscanf_r+0x1a6>
 800254e:	6822      	ldr	r2, [r4, #0]
 8002550:	7813      	ldrb	r3, [r2, #0]
 8002552:	4553      	cmp	r3, sl
 8002554:	f040 8131 	bne.w	80027ba <__ssvfiscanf_r+0x2ea>
 8002558:	6863      	ldr	r3, [r4, #4]
 800255a:	3201      	adds	r2, #1
 800255c:	3b01      	subs	r3, #1
 800255e:	6063      	str	r3, [r4, #4]
 8002560:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8002562:	6022      	str	r2, [r4, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	9345      	str	r3, [sp, #276]	; 0x114
 8002568:	e7d8      	b.n	800251c <__ssvfiscanf_r+0x4c>
 800256a:	9141      	str	r1, [sp, #260]	; 0x104
 800256c:	9143      	str	r1, [sp, #268]	; 0x10c
 800256e:	7853      	ldrb	r3, [r2, #1]
 8002570:	2b2a      	cmp	r3, #42	; 0x2a
 8002572:	bf04      	itt	eq
 8002574:	2310      	moveq	r3, #16
 8002576:	1c95      	addeq	r5, r2, #2
 8002578:	f04f 020a 	mov.w	r2, #10
 800257c:	bf08      	it	eq
 800257e:	9341      	streq	r3, [sp, #260]	; 0x104
 8002580:	46aa      	mov	sl, r5
 8002582:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8002586:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800258a:	2b09      	cmp	r3, #9
 800258c:	d91d      	bls.n	80025ca <__ssvfiscanf_r+0xfa>
 800258e:	2203      	movs	r2, #3
 8002590:	487e      	ldr	r0, [pc, #504]	; (800278c <__ssvfiscanf_r+0x2bc>)
 8002592:	f000 fd63 	bl	800305c <memchr>
 8002596:	b140      	cbz	r0, 80025aa <__ssvfiscanf_r+0xda>
 8002598:	2301      	movs	r3, #1
 800259a:	4655      	mov	r5, sl
 800259c:	eba0 0009 	sub.w	r0, r0, r9
 80025a0:	fa03 f000 	lsl.w	r0, r3, r0
 80025a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80025a6:	4318      	orrs	r0, r3
 80025a8:	9041      	str	r0, [sp, #260]	; 0x104
 80025aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80025ae:	2b78      	cmp	r3, #120	; 0x78
 80025b0:	d806      	bhi.n	80025c0 <__ssvfiscanf_r+0xf0>
 80025b2:	2b57      	cmp	r3, #87	; 0x57
 80025b4:	d810      	bhi.n	80025d8 <__ssvfiscanf_r+0x108>
 80025b6:	2b25      	cmp	r3, #37	; 0x25
 80025b8:	d0c4      	beq.n	8002544 <__ssvfiscanf_r+0x74>
 80025ba:	d857      	bhi.n	800266c <__ssvfiscanf_r+0x19c>
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d065      	beq.n	800268c <__ssvfiscanf_r+0x1bc>
 80025c0:	2303      	movs	r3, #3
 80025c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80025c4:	230a      	movs	r3, #10
 80025c6:	9342      	str	r3, [sp, #264]	; 0x108
 80025c8:	e072      	b.n	80026b0 <__ssvfiscanf_r+0x1e0>
 80025ca:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80025cc:	4655      	mov	r5, sl
 80025ce:	fb02 1103 	mla	r1, r2, r3, r1
 80025d2:	3930      	subs	r1, #48	; 0x30
 80025d4:	9143      	str	r1, [sp, #268]	; 0x10c
 80025d6:	e7d3      	b.n	8002580 <__ssvfiscanf_r+0xb0>
 80025d8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80025dc:	2a20      	cmp	r2, #32
 80025de:	d8ef      	bhi.n	80025c0 <__ssvfiscanf_r+0xf0>
 80025e0:	a101      	add	r1, pc, #4	; (adr r1, 80025e8 <__ssvfiscanf_r+0x118>)
 80025e2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80025e6:	bf00      	nop
 80025e8:	0800269b 	.word	0x0800269b
 80025ec:	080025c1 	.word	0x080025c1
 80025f0:	080025c1 	.word	0x080025c1
 80025f4:	080026f9 	.word	0x080026f9
 80025f8:	080025c1 	.word	0x080025c1
 80025fc:	080025c1 	.word	0x080025c1
 8002600:	080025c1 	.word	0x080025c1
 8002604:	080025c1 	.word	0x080025c1
 8002608:	080025c1 	.word	0x080025c1
 800260c:	080025c1 	.word	0x080025c1
 8002610:	080025c1 	.word	0x080025c1
 8002614:	0800270f 	.word	0x0800270f
 8002618:	080026e5 	.word	0x080026e5
 800261c:	08002673 	.word	0x08002673
 8002620:	08002673 	.word	0x08002673
 8002624:	08002673 	.word	0x08002673
 8002628:	080025c1 	.word	0x080025c1
 800262c:	080026e9 	.word	0x080026e9
 8002630:	080025c1 	.word	0x080025c1
 8002634:	080025c1 	.word	0x080025c1
 8002638:	080025c1 	.word	0x080025c1
 800263c:	080025c1 	.word	0x080025c1
 8002640:	0800271f 	.word	0x0800271f
 8002644:	080026f1 	.word	0x080026f1
 8002648:	08002693 	.word	0x08002693
 800264c:	080025c1 	.word	0x080025c1
 8002650:	080025c1 	.word	0x080025c1
 8002654:	0800271b 	.word	0x0800271b
 8002658:	080025c1 	.word	0x080025c1
 800265c:	080026e5 	.word	0x080026e5
 8002660:	080025c1 	.word	0x080025c1
 8002664:	080025c1 	.word	0x080025c1
 8002668:	0800269b 	.word	0x0800269b
 800266c:	3b45      	subs	r3, #69	; 0x45
 800266e:	2b02      	cmp	r3, #2
 8002670:	d8a6      	bhi.n	80025c0 <__ssvfiscanf_r+0xf0>
 8002672:	2305      	movs	r3, #5
 8002674:	e01b      	b.n	80026ae <__ssvfiscanf_r+0x1de>
 8002676:	4621      	mov	r1, r4
 8002678:	4630      	mov	r0, r6
 800267a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800267c:	4798      	blx	r3
 800267e:	2800      	cmp	r0, #0
 8002680:	f43f af65 	beq.w	800254e <__ssvfiscanf_r+0x7e>
 8002684:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002686:	2800      	cmp	r0, #0
 8002688:	f040 808d 	bne.w	80027a6 <__ssvfiscanf_r+0x2d6>
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	e08f      	b.n	80027b2 <__ssvfiscanf_r+0x2e2>
 8002692:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002694:	f042 0220 	orr.w	r2, r2, #32
 8002698:	9241      	str	r2, [sp, #260]	; 0x104
 800269a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800269c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a0:	9241      	str	r2, [sp, #260]	; 0x104
 80026a2:	2210      	movs	r2, #16
 80026a4:	2b6f      	cmp	r3, #111	; 0x6f
 80026a6:	bf34      	ite	cc
 80026a8:	2303      	movcc	r3, #3
 80026aa:	2304      	movcs	r3, #4
 80026ac:	9242      	str	r2, [sp, #264]	; 0x108
 80026ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80026b0:	6863      	ldr	r3, [r4, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	dd42      	ble.n	800273c <__ssvfiscanf_r+0x26c>
 80026b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80026b8:	0659      	lsls	r1, r3, #25
 80026ba:	d404      	bmi.n	80026c6 <__ssvfiscanf_r+0x1f6>
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	781a      	ldrb	r2, [r3, #0]
 80026c0:	5cba      	ldrb	r2, [r7, r2]
 80026c2:	0712      	lsls	r2, r2, #28
 80026c4:	d441      	bmi.n	800274a <__ssvfiscanf_r+0x27a>
 80026c6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	dc50      	bgt.n	800276e <__ssvfiscanf_r+0x29e>
 80026cc:	466b      	mov	r3, sp
 80026ce:	4622      	mov	r2, r4
 80026d0:	4630      	mov	r0, r6
 80026d2:	a941      	add	r1, sp, #260	; 0x104
 80026d4:	f000 fa0c 	bl	8002af0 <_scanf_chars>
 80026d8:	2801      	cmp	r0, #1
 80026da:	d06e      	beq.n	80027ba <__ssvfiscanf_r+0x2ea>
 80026dc:	2802      	cmp	r0, #2
 80026de:	f47f af1d 	bne.w	800251c <__ssvfiscanf_r+0x4c>
 80026e2:	e7cf      	b.n	8002684 <__ssvfiscanf_r+0x1b4>
 80026e4:	220a      	movs	r2, #10
 80026e6:	e7dd      	b.n	80026a4 <__ssvfiscanf_r+0x1d4>
 80026e8:	2300      	movs	r3, #0
 80026ea:	9342      	str	r3, [sp, #264]	; 0x108
 80026ec:	2303      	movs	r3, #3
 80026ee:	e7de      	b.n	80026ae <__ssvfiscanf_r+0x1de>
 80026f0:	2308      	movs	r3, #8
 80026f2:	9342      	str	r3, [sp, #264]	; 0x108
 80026f4:	2304      	movs	r3, #4
 80026f6:	e7da      	b.n	80026ae <__ssvfiscanf_r+0x1de>
 80026f8:	4629      	mov	r1, r5
 80026fa:	4640      	mov	r0, r8
 80026fc:	f000 fb4a 	bl	8002d94 <__sccl>
 8002700:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002702:	4605      	mov	r5, r0
 8002704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002708:	9341      	str	r3, [sp, #260]	; 0x104
 800270a:	2301      	movs	r3, #1
 800270c:	e7cf      	b.n	80026ae <__ssvfiscanf_r+0x1de>
 800270e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002714:	9341      	str	r3, [sp, #260]	; 0x104
 8002716:	2300      	movs	r3, #0
 8002718:	e7c9      	b.n	80026ae <__ssvfiscanf_r+0x1de>
 800271a:	2302      	movs	r3, #2
 800271c:	e7c7      	b.n	80026ae <__ssvfiscanf_r+0x1de>
 800271e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8002720:	06c3      	lsls	r3, r0, #27
 8002722:	f53f aefb 	bmi.w	800251c <__ssvfiscanf_r+0x4c>
 8002726:	9b00      	ldr	r3, [sp, #0]
 8002728:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800272a:	1d19      	adds	r1, r3, #4
 800272c:	9100      	str	r1, [sp, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f010 0f01 	tst.w	r0, #1
 8002734:	bf14      	ite	ne
 8002736:	801a      	strhne	r2, [r3, #0]
 8002738:	601a      	streq	r2, [r3, #0]
 800273a:	e6ef      	b.n	800251c <__ssvfiscanf_r+0x4c>
 800273c:	4621      	mov	r1, r4
 800273e:	4630      	mov	r0, r6
 8002740:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002742:	4798      	blx	r3
 8002744:	2800      	cmp	r0, #0
 8002746:	d0b6      	beq.n	80026b6 <__ssvfiscanf_r+0x1e6>
 8002748:	e79c      	b.n	8002684 <__ssvfiscanf_r+0x1b4>
 800274a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800274c:	3201      	adds	r2, #1
 800274e:	9245      	str	r2, [sp, #276]	; 0x114
 8002750:	6862      	ldr	r2, [r4, #4]
 8002752:	3a01      	subs	r2, #1
 8002754:	2a00      	cmp	r2, #0
 8002756:	6062      	str	r2, [r4, #4]
 8002758:	dd02      	ble.n	8002760 <__ssvfiscanf_r+0x290>
 800275a:	3301      	adds	r3, #1
 800275c:	6023      	str	r3, [r4, #0]
 800275e:	e7ad      	b.n	80026bc <__ssvfiscanf_r+0x1ec>
 8002760:	4621      	mov	r1, r4
 8002762:	4630      	mov	r0, r6
 8002764:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002766:	4798      	blx	r3
 8002768:	2800      	cmp	r0, #0
 800276a:	d0a7      	beq.n	80026bc <__ssvfiscanf_r+0x1ec>
 800276c:	e78a      	b.n	8002684 <__ssvfiscanf_r+0x1b4>
 800276e:	2b04      	cmp	r3, #4
 8002770:	dc0e      	bgt.n	8002790 <__ssvfiscanf_r+0x2c0>
 8002772:	466b      	mov	r3, sp
 8002774:	4622      	mov	r2, r4
 8002776:	4630      	mov	r0, r6
 8002778:	a941      	add	r1, sp, #260	; 0x104
 800277a:	f000 fa13 	bl	8002ba4 <_scanf_i>
 800277e:	e7ab      	b.n	80026d8 <__ssvfiscanf_r+0x208>
 8002780:	0800241d 	.word	0x0800241d
 8002784:	08002497 	.word	0x08002497
 8002788:	08003455 	.word	0x08003455
 800278c:	0800340c 	.word	0x0800340c
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <__ssvfiscanf_r+0x2f0>)
 8002792:	2b00      	cmp	r3, #0
 8002794:	f43f aec2 	beq.w	800251c <__ssvfiscanf_r+0x4c>
 8002798:	466b      	mov	r3, sp
 800279a:	4622      	mov	r2, r4
 800279c:	4630      	mov	r0, r6
 800279e:	a941      	add	r1, sp, #260	; 0x104
 80027a0:	f3af 8000 	nop.w
 80027a4:	e798      	b.n	80026d8 <__ssvfiscanf_r+0x208>
 80027a6:	89a3      	ldrh	r3, [r4, #12]
 80027a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027ac:	bf18      	it	ne
 80027ae:	f04f 30ff 	movne.w	r0, #4294967295
 80027b2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80027b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ba:	9844      	ldr	r0, [sp, #272]	; 0x110
 80027bc:	e7f9      	b.n	80027b2 <__ssvfiscanf_r+0x2e2>
 80027be:	bf00      	nop
 80027c0:	00000000 	.word	0x00000000

080027c4 <_printf_common>:
 80027c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027c8:	4616      	mov	r6, r2
 80027ca:	4699      	mov	r9, r3
 80027cc:	688a      	ldr	r2, [r1, #8]
 80027ce:	690b      	ldr	r3, [r1, #16]
 80027d0:	4607      	mov	r7, r0
 80027d2:	4293      	cmp	r3, r2
 80027d4:	bfb8      	it	lt
 80027d6:	4613      	movlt	r3, r2
 80027d8:	6033      	str	r3, [r6, #0]
 80027da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027de:	460c      	mov	r4, r1
 80027e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027e4:	b10a      	cbz	r2, 80027ea <_printf_common+0x26>
 80027e6:	3301      	adds	r3, #1
 80027e8:	6033      	str	r3, [r6, #0]
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	0699      	lsls	r1, r3, #26
 80027ee:	bf42      	ittt	mi
 80027f0:	6833      	ldrmi	r3, [r6, #0]
 80027f2:	3302      	addmi	r3, #2
 80027f4:	6033      	strmi	r3, [r6, #0]
 80027f6:	6825      	ldr	r5, [r4, #0]
 80027f8:	f015 0506 	ands.w	r5, r5, #6
 80027fc:	d106      	bne.n	800280c <_printf_common+0x48>
 80027fe:	f104 0a19 	add.w	sl, r4, #25
 8002802:	68e3      	ldr	r3, [r4, #12]
 8002804:	6832      	ldr	r2, [r6, #0]
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	42ab      	cmp	r3, r5
 800280a:	dc28      	bgt.n	800285e <_printf_common+0x9a>
 800280c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002810:	1e13      	subs	r3, r2, #0
 8002812:	6822      	ldr	r2, [r4, #0]
 8002814:	bf18      	it	ne
 8002816:	2301      	movne	r3, #1
 8002818:	0692      	lsls	r2, r2, #26
 800281a:	d42d      	bmi.n	8002878 <_printf_common+0xb4>
 800281c:	4649      	mov	r1, r9
 800281e:	4638      	mov	r0, r7
 8002820:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002824:	47c0      	blx	r8
 8002826:	3001      	adds	r0, #1
 8002828:	d020      	beq.n	800286c <_printf_common+0xa8>
 800282a:	6823      	ldr	r3, [r4, #0]
 800282c:	68e5      	ldr	r5, [r4, #12]
 800282e:	f003 0306 	and.w	r3, r3, #6
 8002832:	2b04      	cmp	r3, #4
 8002834:	bf18      	it	ne
 8002836:	2500      	movne	r5, #0
 8002838:	6832      	ldr	r2, [r6, #0]
 800283a:	f04f 0600 	mov.w	r6, #0
 800283e:	68a3      	ldr	r3, [r4, #8]
 8002840:	bf08      	it	eq
 8002842:	1aad      	subeq	r5, r5, r2
 8002844:	6922      	ldr	r2, [r4, #16]
 8002846:	bf08      	it	eq
 8002848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800284c:	4293      	cmp	r3, r2
 800284e:	bfc4      	itt	gt
 8002850:	1a9b      	subgt	r3, r3, r2
 8002852:	18ed      	addgt	r5, r5, r3
 8002854:	341a      	adds	r4, #26
 8002856:	42b5      	cmp	r5, r6
 8002858:	d11a      	bne.n	8002890 <_printf_common+0xcc>
 800285a:	2000      	movs	r0, #0
 800285c:	e008      	b.n	8002870 <_printf_common+0xac>
 800285e:	2301      	movs	r3, #1
 8002860:	4652      	mov	r2, sl
 8002862:	4649      	mov	r1, r9
 8002864:	4638      	mov	r0, r7
 8002866:	47c0      	blx	r8
 8002868:	3001      	adds	r0, #1
 800286a:	d103      	bne.n	8002874 <_printf_common+0xb0>
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002874:	3501      	adds	r5, #1
 8002876:	e7c4      	b.n	8002802 <_printf_common+0x3e>
 8002878:	2030      	movs	r0, #48	; 0x30
 800287a:	18e1      	adds	r1, r4, r3
 800287c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002886:	4422      	add	r2, r4
 8002888:	3302      	adds	r3, #2
 800288a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800288e:	e7c5      	b.n	800281c <_printf_common+0x58>
 8002890:	2301      	movs	r3, #1
 8002892:	4622      	mov	r2, r4
 8002894:	4649      	mov	r1, r9
 8002896:	4638      	mov	r0, r7
 8002898:	47c0      	blx	r8
 800289a:	3001      	adds	r0, #1
 800289c:	d0e6      	beq.n	800286c <_printf_common+0xa8>
 800289e:	3601      	adds	r6, #1
 80028a0:	e7d9      	b.n	8002856 <_printf_common+0x92>
	...

080028a4 <_printf_i>:
 80028a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028a8:	7e0f      	ldrb	r7, [r1, #24]
 80028aa:	4691      	mov	r9, r2
 80028ac:	2f78      	cmp	r7, #120	; 0x78
 80028ae:	4680      	mov	r8, r0
 80028b0:	460c      	mov	r4, r1
 80028b2:	469a      	mov	sl, r3
 80028b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028ba:	d807      	bhi.n	80028cc <_printf_i+0x28>
 80028bc:	2f62      	cmp	r7, #98	; 0x62
 80028be:	d80a      	bhi.n	80028d6 <_printf_i+0x32>
 80028c0:	2f00      	cmp	r7, #0
 80028c2:	f000 80d9 	beq.w	8002a78 <_printf_i+0x1d4>
 80028c6:	2f58      	cmp	r7, #88	; 0x58
 80028c8:	f000 80a4 	beq.w	8002a14 <_printf_i+0x170>
 80028cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028d4:	e03a      	b.n	800294c <_printf_i+0xa8>
 80028d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028da:	2b15      	cmp	r3, #21
 80028dc:	d8f6      	bhi.n	80028cc <_printf_i+0x28>
 80028de:	a101      	add	r1, pc, #4	; (adr r1, 80028e4 <_printf_i+0x40>)
 80028e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028e4:	0800293d 	.word	0x0800293d
 80028e8:	08002951 	.word	0x08002951
 80028ec:	080028cd 	.word	0x080028cd
 80028f0:	080028cd 	.word	0x080028cd
 80028f4:	080028cd 	.word	0x080028cd
 80028f8:	080028cd 	.word	0x080028cd
 80028fc:	08002951 	.word	0x08002951
 8002900:	080028cd 	.word	0x080028cd
 8002904:	080028cd 	.word	0x080028cd
 8002908:	080028cd 	.word	0x080028cd
 800290c:	080028cd 	.word	0x080028cd
 8002910:	08002a5f 	.word	0x08002a5f
 8002914:	08002981 	.word	0x08002981
 8002918:	08002a41 	.word	0x08002a41
 800291c:	080028cd 	.word	0x080028cd
 8002920:	080028cd 	.word	0x080028cd
 8002924:	08002a81 	.word	0x08002a81
 8002928:	080028cd 	.word	0x080028cd
 800292c:	08002981 	.word	0x08002981
 8002930:	080028cd 	.word	0x080028cd
 8002934:	080028cd 	.word	0x080028cd
 8002938:	08002a49 	.word	0x08002a49
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	1d1a      	adds	r2, r3, #4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	602a      	str	r2, [r5, #0]
 8002944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800294c:	2301      	movs	r3, #1
 800294e:	e0a4      	b.n	8002a9a <_printf_i+0x1f6>
 8002950:	6820      	ldr	r0, [r4, #0]
 8002952:	6829      	ldr	r1, [r5, #0]
 8002954:	0606      	lsls	r6, r0, #24
 8002956:	f101 0304 	add.w	r3, r1, #4
 800295a:	d50a      	bpl.n	8002972 <_printf_i+0xce>
 800295c:	680e      	ldr	r6, [r1, #0]
 800295e:	602b      	str	r3, [r5, #0]
 8002960:	2e00      	cmp	r6, #0
 8002962:	da03      	bge.n	800296c <_printf_i+0xc8>
 8002964:	232d      	movs	r3, #45	; 0x2d
 8002966:	4276      	negs	r6, r6
 8002968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800296c:	230a      	movs	r3, #10
 800296e:	485e      	ldr	r0, [pc, #376]	; (8002ae8 <_printf_i+0x244>)
 8002970:	e019      	b.n	80029a6 <_printf_i+0x102>
 8002972:	680e      	ldr	r6, [r1, #0]
 8002974:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002978:	602b      	str	r3, [r5, #0]
 800297a:	bf18      	it	ne
 800297c:	b236      	sxthne	r6, r6
 800297e:	e7ef      	b.n	8002960 <_printf_i+0xbc>
 8002980:	682b      	ldr	r3, [r5, #0]
 8002982:	6820      	ldr	r0, [r4, #0]
 8002984:	1d19      	adds	r1, r3, #4
 8002986:	6029      	str	r1, [r5, #0]
 8002988:	0601      	lsls	r1, r0, #24
 800298a:	d501      	bpl.n	8002990 <_printf_i+0xec>
 800298c:	681e      	ldr	r6, [r3, #0]
 800298e:	e002      	b.n	8002996 <_printf_i+0xf2>
 8002990:	0646      	lsls	r6, r0, #25
 8002992:	d5fb      	bpl.n	800298c <_printf_i+0xe8>
 8002994:	881e      	ldrh	r6, [r3, #0]
 8002996:	2f6f      	cmp	r7, #111	; 0x6f
 8002998:	bf0c      	ite	eq
 800299a:	2308      	moveq	r3, #8
 800299c:	230a      	movne	r3, #10
 800299e:	4852      	ldr	r0, [pc, #328]	; (8002ae8 <_printf_i+0x244>)
 80029a0:	2100      	movs	r1, #0
 80029a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029a6:	6865      	ldr	r5, [r4, #4]
 80029a8:	2d00      	cmp	r5, #0
 80029aa:	bfa8      	it	ge
 80029ac:	6821      	ldrge	r1, [r4, #0]
 80029ae:	60a5      	str	r5, [r4, #8]
 80029b0:	bfa4      	itt	ge
 80029b2:	f021 0104 	bicge.w	r1, r1, #4
 80029b6:	6021      	strge	r1, [r4, #0]
 80029b8:	b90e      	cbnz	r6, 80029be <_printf_i+0x11a>
 80029ba:	2d00      	cmp	r5, #0
 80029bc:	d04d      	beq.n	8002a5a <_printf_i+0x1b6>
 80029be:	4615      	mov	r5, r2
 80029c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80029c4:	fb03 6711 	mls	r7, r3, r1, r6
 80029c8:	5dc7      	ldrb	r7, [r0, r7]
 80029ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029ce:	4637      	mov	r7, r6
 80029d0:	42bb      	cmp	r3, r7
 80029d2:	460e      	mov	r6, r1
 80029d4:	d9f4      	bls.n	80029c0 <_printf_i+0x11c>
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d10b      	bne.n	80029f2 <_printf_i+0x14e>
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	07de      	lsls	r6, r3, #31
 80029de:	d508      	bpl.n	80029f2 <_printf_i+0x14e>
 80029e0:	6923      	ldr	r3, [r4, #16]
 80029e2:	6861      	ldr	r1, [r4, #4]
 80029e4:	4299      	cmp	r1, r3
 80029e6:	bfde      	ittt	le
 80029e8:	2330      	movle	r3, #48	; 0x30
 80029ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029f2:	1b52      	subs	r2, r2, r5
 80029f4:	6122      	str	r2, [r4, #16]
 80029f6:	464b      	mov	r3, r9
 80029f8:	4621      	mov	r1, r4
 80029fa:	4640      	mov	r0, r8
 80029fc:	f8cd a000 	str.w	sl, [sp]
 8002a00:	aa03      	add	r2, sp, #12
 8002a02:	f7ff fedf 	bl	80027c4 <_printf_common>
 8002a06:	3001      	adds	r0, #1
 8002a08:	d14c      	bne.n	8002aa4 <_printf_i+0x200>
 8002a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a0e:	b004      	add	sp, #16
 8002a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a14:	4834      	ldr	r0, [pc, #208]	; (8002ae8 <_printf_i+0x244>)
 8002a16:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002a1a:	6829      	ldr	r1, [r5, #0]
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a22:	6029      	str	r1, [r5, #0]
 8002a24:	061d      	lsls	r5, r3, #24
 8002a26:	d514      	bpl.n	8002a52 <_printf_i+0x1ae>
 8002a28:	07df      	lsls	r7, r3, #31
 8002a2a:	bf44      	itt	mi
 8002a2c:	f043 0320 	orrmi.w	r3, r3, #32
 8002a30:	6023      	strmi	r3, [r4, #0]
 8002a32:	b91e      	cbnz	r6, 8002a3c <_printf_i+0x198>
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	f023 0320 	bic.w	r3, r3, #32
 8002a3a:	6023      	str	r3, [r4, #0]
 8002a3c:	2310      	movs	r3, #16
 8002a3e:	e7af      	b.n	80029a0 <_printf_i+0xfc>
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	f043 0320 	orr.w	r3, r3, #32
 8002a46:	6023      	str	r3, [r4, #0]
 8002a48:	2378      	movs	r3, #120	; 0x78
 8002a4a:	4828      	ldr	r0, [pc, #160]	; (8002aec <_printf_i+0x248>)
 8002a4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a50:	e7e3      	b.n	8002a1a <_printf_i+0x176>
 8002a52:	0659      	lsls	r1, r3, #25
 8002a54:	bf48      	it	mi
 8002a56:	b2b6      	uxthmi	r6, r6
 8002a58:	e7e6      	b.n	8002a28 <_printf_i+0x184>
 8002a5a:	4615      	mov	r5, r2
 8002a5c:	e7bb      	b.n	80029d6 <_printf_i+0x132>
 8002a5e:	682b      	ldr	r3, [r5, #0]
 8002a60:	6826      	ldr	r6, [r4, #0]
 8002a62:	1d18      	adds	r0, r3, #4
 8002a64:	6961      	ldr	r1, [r4, #20]
 8002a66:	6028      	str	r0, [r5, #0]
 8002a68:	0635      	lsls	r5, r6, #24
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	d501      	bpl.n	8002a72 <_printf_i+0x1ce>
 8002a6e:	6019      	str	r1, [r3, #0]
 8002a70:	e002      	b.n	8002a78 <_printf_i+0x1d4>
 8002a72:	0670      	lsls	r0, r6, #25
 8002a74:	d5fb      	bpl.n	8002a6e <_printf_i+0x1ca>
 8002a76:	8019      	strh	r1, [r3, #0]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	4615      	mov	r5, r2
 8002a7c:	6123      	str	r3, [r4, #16]
 8002a7e:	e7ba      	b.n	80029f6 <_printf_i+0x152>
 8002a80:	682b      	ldr	r3, [r5, #0]
 8002a82:	2100      	movs	r1, #0
 8002a84:	1d1a      	adds	r2, r3, #4
 8002a86:	602a      	str	r2, [r5, #0]
 8002a88:	681d      	ldr	r5, [r3, #0]
 8002a8a:	6862      	ldr	r2, [r4, #4]
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	f000 fae5 	bl	800305c <memchr>
 8002a92:	b108      	cbz	r0, 8002a98 <_printf_i+0x1f4>
 8002a94:	1b40      	subs	r0, r0, r5
 8002a96:	6060      	str	r0, [r4, #4]
 8002a98:	6863      	ldr	r3, [r4, #4]
 8002a9a:	6123      	str	r3, [r4, #16]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aa2:	e7a8      	b.n	80029f6 <_printf_i+0x152>
 8002aa4:	462a      	mov	r2, r5
 8002aa6:	4649      	mov	r1, r9
 8002aa8:	4640      	mov	r0, r8
 8002aaa:	6923      	ldr	r3, [r4, #16]
 8002aac:	47d0      	blx	sl
 8002aae:	3001      	adds	r0, #1
 8002ab0:	d0ab      	beq.n	8002a0a <_printf_i+0x166>
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	079b      	lsls	r3, r3, #30
 8002ab6:	d413      	bmi.n	8002ae0 <_printf_i+0x23c>
 8002ab8:	68e0      	ldr	r0, [r4, #12]
 8002aba:	9b03      	ldr	r3, [sp, #12]
 8002abc:	4298      	cmp	r0, r3
 8002abe:	bfb8      	it	lt
 8002ac0:	4618      	movlt	r0, r3
 8002ac2:	e7a4      	b.n	8002a0e <_printf_i+0x16a>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	4632      	mov	r2, r6
 8002ac8:	4649      	mov	r1, r9
 8002aca:	4640      	mov	r0, r8
 8002acc:	47d0      	blx	sl
 8002ace:	3001      	adds	r0, #1
 8002ad0:	d09b      	beq.n	8002a0a <_printf_i+0x166>
 8002ad2:	3501      	adds	r5, #1
 8002ad4:	68e3      	ldr	r3, [r4, #12]
 8002ad6:	9903      	ldr	r1, [sp, #12]
 8002ad8:	1a5b      	subs	r3, r3, r1
 8002ada:	42ab      	cmp	r3, r5
 8002adc:	dcf2      	bgt.n	8002ac4 <_printf_i+0x220>
 8002ade:	e7eb      	b.n	8002ab8 <_printf_i+0x214>
 8002ae0:	2500      	movs	r5, #0
 8002ae2:	f104 0619 	add.w	r6, r4, #25
 8002ae6:	e7f5      	b.n	8002ad4 <_printf_i+0x230>
 8002ae8:	08003417 	.word	0x08003417
 8002aec:	08003428 	.word	0x08003428

08002af0 <_scanf_chars>:
 8002af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002af4:	4615      	mov	r5, r2
 8002af6:	688a      	ldr	r2, [r1, #8]
 8002af8:	4680      	mov	r8, r0
 8002afa:	460c      	mov	r4, r1
 8002afc:	b932      	cbnz	r2, 8002b0c <_scanf_chars+0x1c>
 8002afe:	698a      	ldr	r2, [r1, #24]
 8002b00:	2a00      	cmp	r2, #0
 8002b02:	bf0c      	ite	eq
 8002b04:	2201      	moveq	r2, #1
 8002b06:	f04f 32ff 	movne.w	r2, #4294967295
 8002b0a:	608a      	str	r2, [r1, #8]
 8002b0c:	2700      	movs	r7, #0
 8002b0e:	6822      	ldr	r2, [r4, #0]
 8002b10:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002ba0 <_scanf_chars+0xb0>
 8002b14:	06d1      	lsls	r1, r2, #27
 8002b16:	bf5f      	itttt	pl
 8002b18:	681a      	ldrpl	r2, [r3, #0]
 8002b1a:	1d11      	addpl	r1, r2, #4
 8002b1c:	6019      	strpl	r1, [r3, #0]
 8002b1e:	6816      	ldrpl	r6, [r2, #0]
 8002b20:	69a0      	ldr	r0, [r4, #24]
 8002b22:	b188      	cbz	r0, 8002b48 <_scanf_chars+0x58>
 8002b24:	2801      	cmp	r0, #1
 8002b26:	d107      	bne.n	8002b38 <_scanf_chars+0x48>
 8002b28:	682b      	ldr	r3, [r5, #0]
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	6963      	ldr	r3, [r4, #20]
 8002b2e:	5c9b      	ldrb	r3, [r3, r2]
 8002b30:	b953      	cbnz	r3, 8002b48 <_scanf_chars+0x58>
 8002b32:	2f00      	cmp	r7, #0
 8002b34:	d031      	beq.n	8002b9a <_scanf_chars+0xaa>
 8002b36:	e022      	b.n	8002b7e <_scanf_chars+0x8e>
 8002b38:	2802      	cmp	r0, #2
 8002b3a:	d120      	bne.n	8002b7e <_scanf_chars+0x8e>
 8002b3c:	682b      	ldr	r3, [r5, #0]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	f813 3009 	ldrb.w	r3, [r3, r9]
 8002b44:	071b      	lsls	r3, r3, #28
 8002b46:	d41a      	bmi.n	8002b7e <_scanf_chars+0x8e>
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	3701      	adds	r7, #1
 8002b4c:	06da      	lsls	r2, r3, #27
 8002b4e:	bf5e      	ittt	pl
 8002b50:	682b      	ldrpl	r3, [r5, #0]
 8002b52:	781b      	ldrbpl	r3, [r3, #0]
 8002b54:	f806 3b01 	strbpl.w	r3, [r6], #1
 8002b58:	682a      	ldr	r2, [r5, #0]
 8002b5a:	686b      	ldr	r3, [r5, #4]
 8002b5c:	3201      	adds	r2, #1
 8002b5e:	602a      	str	r2, [r5, #0]
 8002b60:	68a2      	ldr	r2, [r4, #8]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	3a01      	subs	r2, #1
 8002b66:	606b      	str	r3, [r5, #4]
 8002b68:	60a2      	str	r2, [r4, #8]
 8002b6a:	b142      	cbz	r2, 8002b7e <_scanf_chars+0x8e>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	dcd7      	bgt.n	8002b20 <_scanf_chars+0x30>
 8002b70:	4629      	mov	r1, r5
 8002b72:	4640      	mov	r0, r8
 8002b74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002b78:	4798      	blx	r3
 8002b7a:	2800      	cmp	r0, #0
 8002b7c:	d0d0      	beq.n	8002b20 <_scanf_chars+0x30>
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	f013 0310 	ands.w	r3, r3, #16
 8002b84:	d105      	bne.n	8002b92 <_scanf_chars+0xa2>
 8002b86:	68e2      	ldr	r2, [r4, #12]
 8002b88:	3201      	adds	r2, #1
 8002b8a:	60e2      	str	r2, [r4, #12]
 8002b8c:	69a2      	ldr	r2, [r4, #24]
 8002b8e:	b102      	cbz	r2, 8002b92 <_scanf_chars+0xa2>
 8002b90:	7033      	strb	r3, [r6, #0]
 8002b92:	2000      	movs	r0, #0
 8002b94:	6923      	ldr	r3, [r4, #16]
 8002b96:	443b      	add	r3, r7
 8002b98:	6123      	str	r3, [r4, #16]
 8002b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b9e:	bf00      	nop
 8002ba0:	08003455 	.word	0x08003455

08002ba4 <_scanf_i>:
 8002ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba8:	460c      	mov	r4, r1
 8002baa:	4698      	mov	r8, r3
 8002bac:	4b75      	ldr	r3, [pc, #468]	; (8002d84 <_scanf_i+0x1e0>)
 8002bae:	b087      	sub	sp, #28
 8002bb0:	4682      	mov	sl, r0
 8002bb2:	4616      	mov	r6, r2
 8002bb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bb8:	ab03      	add	r3, sp, #12
 8002bba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002bbe:	4b72      	ldr	r3, [pc, #456]	; (8002d88 <_scanf_i+0x1e4>)
 8002bc0:	69a1      	ldr	r1, [r4, #24]
 8002bc2:	4a72      	ldr	r2, [pc, #456]	; (8002d8c <_scanf_i+0x1e8>)
 8002bc4:	4627      	mov	r7, r4
 8002bc6:	2903      	cmp	r1, #3
 8002bc8:	bf18      	it	ne
 8002bca:	461a      	movne	r2, r3
 8002bcc:	68a3      	ldr	r3, [r4, #8]
 8002bce:	9201      	str	r2, [sp, #4]
 8002bd0:	1e5a      	subs	r2, r3, #1
 8002bd2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002bd6:	bf81      	itttt	hi
 8002bd8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002bdc:	eb03 0905 	addhi.w	r9, r3, r5
 8002be0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002be4:	60a3      	strhi	r3, [r4, #8]
 8002be6:	f857 3b1c 	ldr.w	r3, [r7], #28
 8002bea:	bf98      	it	ls
 8002bec:	f04f 0900 	movls.w	r9, #0
 8002bf0:	463d      	mov	r5, r7
 8002bf2:	f04f 0b00 	mov.w	fp, #0
 8002bf6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8002bfa:	6023      	str	r3, [r4, #0]
 8002bfc:	6831      	ldr	r1, [r6, #0]
 8002bfe:	ab03      	add	r3, sp, #12
 8002c00:	2202      	movs	r2, #2
 8002c02:	7809      	ldrb	r1, [r1, #0]
 8002c04:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8002c08:	f000 fa28 	bl	800305c <memchr>
 8002c0c:	b328      	cbz	r0, 8002c5a <_scanf_i+0xb6>
 8002c0e:	f1bb 0f01 	cmp.w	fp, #1
 8002c12:	d159      	bne.n	8002cc8 <_scanf_i+0x124>
 8002c14:	6862      	ldr	r2, [r4, #4]
 8002c16:	b92a      	cbnz	r2, 8002c24 <_scanf_i+0x80>
 8002c18:	2308      	movs	r3, #8
 8002c1a:	6822      	ldr	r2, [r4, #0]
 8002c1c:	6063      	str	r3, [r4, #4]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c22:	6022      	str	r2, [r4, #0]
 8002c24:	6822      	ldr	r2, [r4, #0]
 8002c26:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8002c2a:	6022      	str	r2, [r4, #0]
 8002c2c:	68a2      	ldr	r2, [r4, #8]
 8002c2e:	1e51      	subs	r1, r2, #1
 8002c30:	60a1      	str	r1, [r4, #8]
 8002c32:	b192      	cbz	r2, 8002c5a <_scanf_i+0xb6>
 8002c34:	6832      	ldr	r2, [r6, #0]
 8002c36:	1c51      	adds	r1, r2, #1
 8002c38:	6031      	str	r1, [r6, #0]
 8002c3a:	7812      	ldrb	r2, [r2, #0]
 8002c3c:	f805 2b01 	strb.w	r2, [r5], #1
 8002c40:	6872      	ldr	r2, [r6, #4]
 8002c42:	3a01      	subs	r2, #1
 8002c44:	2a00      	cmp	r2, #0
 8002c46:	6072      	str	r2, [r6, #4]
 8002c48:	dc07      	bgt.n	8002c5a <_scanf_i+0xb6>
 8002c4a:	4631      	mov	r1, r6
 8002c4c:	4650      	mov	r0, sl
 8002c4e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8002c52:	4790      	blx	r2
 8002c54:	2800      	cmp	r0, #0
 8002c56:	f040 8085 	bne.w	8002d64 <_scanf_i+0x1c0>
 8002c5a:	f10b 0b01 	add.w	fp, fp, #1
 8002c5e:	f1bb 0f03 	cmp.w	fp, #3
 8002c62:	d1cb      	bne.n	8002bfc <_scanf_i+0x58>
 8002c64:	6863      	ldr	r3, [r4, #4]
 8002c66:	b90b      	cbnz	r3, 8002c6c <_scanf_i+0xc8>
 8002c68:	230a      	movs	r3, #10
 8002c6a:	6063      	str	r3, [r4, #4]
 8002c6c:	6863      	ldr	r3, [r4, #4]
 8002c6e:	4948      	ldr	r1, [pc, #288]	; (8002d90 <_scanf_i+0x1ec>)
 8002c70:	6960      	ldr	r0, [r4, #20]
 8002c72:	1ac9      	subs	r1, r1, r3
 8002c74:	f000 f88e 	bl	8002d94 <__sccl>
 8002c78:	f04f 0b00 	mov.w	fp, #0
 8002c7c:	68a3      	ldr	r3, [r4, #8]
 8002c7e:	6822      	ldr	r2, [r4, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d03d      	beq.n	8002d00 <_scanf_i+0x15c>
 8002c84:	6831      	ldr	r1, [r6, #0]
 8002c86:	6960      	ldr	r0, [r4, #20]
 8002c88:	f891 c000 	ldrb.w	ip, [r1]
 8002c8c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8002c90:	2800      	cmp	r0, #0
 8002c92:	d035      	beq.n	8002d00 <_scanf_i+0x15c>
 8002c94:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8002c98:	d124      	bne.n	8002ce4 <_scanf_i+0x140>
 8002c9a:	0510      	lsls	r0, r2, #20
 8002c9c:	d522      	bpl.n	8002ce4 <_scanf_i+0x140>
 8002c9e:	f10b 0b01 	add.w	fp, fp, #1
 8002ca2:	f1b9 0f00 	cmp.w	r9, #0
 8002ca6:	d003      	beq.n	8002cb0 <_scanf_i+0x10c>
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f109 39ff 	add.w	r9, r9, #4294967295
 8002cae:	60a3      	str	r3, [r4, #8]
 8002cb0:	6873      	ldr	r3, [r6, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	6073      	str	r3, [r6, #4]
 8002cb8:	dd1b      	ble.n	8002cf2 <_scanf_i+0x14e>
 8002cba:	6833      	ldr	r3, [r6, #0]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	6033      	str	r3, [r6, #0]
 8002cc0:	68a3      	ldr	r3, [r4, #8]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	60a3      	str	r3, [r4, #8]
 8002cc6:	e7d9      	b.n	8002c7c <_scanf_i+0xd8>
 8002cc8:	f1bb 0f02 	cmp.w	fp, #2
 8002ccc:	d1ae      	bne.n	8002c2c <_scanf_i+0x88>
 8002cce:	6822      	ldr	r2, [r4, #0]
 8002cd0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8002cd4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002cd8:	d1bf      	bne.n	8002c5a <_scanf_i+0xb6>
 8002cda:	2310      	movs	r3, #16
 8002cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce0:	6063      	str	r3, [r4, #4]
 8002ce2:	e7a2      	b.n	8002c2a <_scanf_i+0x86>
 8002ce4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8002ce8:	6022      	str	r2, [r4, #0]
 8002cea:	780b      	ldrb	r3, [r1, #0]
 8002cec:	f805 3b01 	strb.w	r3, [r5], #1
 8002cf0:	e7de      	b.n	8002cb0 <_scanf_i+0x10c>
 8002cf2:	4631      	mov	r1, r6
 8002cf4:	4650      	mov	r0, sl
 8002cf6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002cfa:	4798      	blx	r3
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d0df      	beq.n	8002cc0 <_scanf_i+0x11c>
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	05db      	lsls	r3, r3, #23
 8002d04:	d50d      	bpl.n	8002d22 <_scanf_i+0x17e>
 8002d06:	42bd      	cmp	r5, r7
 8002d08:	d909      	bls.n	8002d1e <_scanf_i+0x17a>
 8002d0a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002d0e:	4632      	mov	r2, r6
 8002d10:	4650      	mov	r0, sl
 8002d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002d16:	f105 39ff 	add.w	r9, r5, #4294967295
 8002d1a:	4798      	blx	r3
 8002d1c:	464d      	mov	r5, r9
 8002d1e:	42bd      	cmp	r5, r7
 8002d20:	d02d      	beq.n	8002d7e <_scanf_i+0x1da>
 8002d22:	6822      	ldr	r2, [r4, #0]
 8002d24:	f012 0210 	ands.w	r2, r2, #16
 8002d28:	d113      	bne.n	8002d52 <_scanf_i+0x1ae>
 8002d2a:	702a      	strb	r2, [r5, #0]
 8002d2c:	4639      	mov	r1, r7
 8002d2e:	6863      	ldr	r3, [r4, #4]
 8002d30:	4650      	mov	r0, sl
 8002d32:	9e01      	ldr	r6, [sp, #4]
 8002d34:	47b0      	blx	r6
 8002d36:	6821      	ldr	r1, [r4, #0]
 8002d38:	f8d8 3000 	ldr.w	r3, [r8]
 8002d3c:	f011 0f20 	tst.w	r1, #32
 8002d40:	d013      	beq.n	8002d6a <_scanf_i+0x1c6>
 8002d42:	1d1a      	adds	r2, r3, #4
 8002d44:	f8c8 2000 	str.w	r2, [r8]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6018      	str	r0, [r3, #0]
 8002d4c:	68e3      	ldr	r3, [r4, #12]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	60e3      	str	r3, [r4, #12]
 8002d52:	2000      	movs	r0, #0
 8002d54:	1bed      	subs	r5, r5, r7
 8002d56:	44ab      	add	fp, r5
 8002d58:	6925      	ldr	r5, [r4, #16]
 8002d5a:	445d      	add	r5, fp
 8002d5c:	6125      	str	r5, [r4, #16]
 8002d5e:	b007      	add	sp, #28
 8002d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d64:	f04f 0b00 	mov.w	fp, #0
 8002d68:	e7ca      	b.n	8002d00 <_scanf_i+0x15c>
 8002d6a:	1d1a      	adds	r2, r3, #4
 8002d6c:	f8c8 2000 	str.w	r2, [r8]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f011 0f01 	tst.w	r1, #1
 8002d76:	bf14      	ite	ne
 8002d78:	8018      	strhne	r0, [r3, #0]
 8002d7a:	6018      	streq	r0, [r3, #0]
 8002d7c:	e7e6      	b.n	8002d4c <_scanf_i+0x1a8>
 8002d7e:	2001      	movs	r0, #1
 8002d80:	e7ed      	b.n	8002d5e <_scanf_i+0x1ba>
 8002d82:	bf00      	nop
 8002d84:	080033d0 	.word	0x080033d0
 8002d88:	08002fe5 	.word	0x08002fe5
 8002d8c:	08002efd 	.word	0x08002efd
 8002d90:	08003452 	.word	0x08003452

08002d94 <__sccl>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	780b      	ldrb	r3, [r1, #0]
 8002d98:	4604      	mov	r4, r0
 8002d9a:	2b5e      	cmp	r3, #94	; 0x5e
 8002d9c:	bf13      	iteet	ne
 8002d9e:	2200      	movne	r2, #0
 8002da0:	2201      	moveq	r2, #1
 8002da2:	784b      	ldrbeq	r3, [r1, #1]
 8002da4:	1c48      	addne	r0, r1, #1
 8002da6:	bf08      	it	eq
 8002da8:	1c88      	addeq	r0, r1, #2
 8002daa:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8002dae:	1e61      	subs	r1, r4, #1
 8002db0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8002db4:	42a9      	cmp	r1, r5
 8002db6:	d1fb      	bne.n	8002db0 <__sccl+0x1c>
 8002db8:	b90b      	cbnz	r3, 8002dbe <__sccl+0x2a>
 8002dba:	3801      	subs	r0, #1
 8002dbc:	bd70      	pop	{r4, r5, r6, pc}
 8002dbe:	f082 0201 	eor.w	r2, r2, #1
 8002dc2:	4605      	mov	r5, r0
 8002dc4:	54e2      	strb	r2, [r4, r3]
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f810 1b01 	ldrb.w	r1, [r0], #1
 8002dcc:	292d      	cmp	r1, #45	; 0x2d
 8002dce:	d006      	beq.n	8002dde <__sccl+0x4a>
 8002dd0:	295d      	cmp	r1, #93	; 0x5d
 8002dd2:	d0f3      	beq.n	8002dbc <__sccl+0x28>
 8002dd4:	b909      	cbnz	r1, 8002dda <__sccl+0x46>
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	e7f0      	b.n	8002dbc <__sccl+0x28>
 8002dda:	460b      	mov	r3, r1
 8002ddc:	e7f1      	b.n	8002dc2 <__sccl+0x2e>
 8002dde:	786e      	ldrb	r6, [r5, #1]
 8002de0:	2e5d      	cmp	r6, #93	; 0x5d
 8002de2:	d0fa      	beq.n	8002dda <__sccl+0x46>
 8002de4:	42b3      	cmp	r3, r6
 8002de6:	dcf8      	bgt.n	8002dda <__sccl+0x46>
 8002de8:	4619      	mov	r1, r3
 8002dea:	3502      	adds	r5, #2
 8002dec:	3101      	adds	r1, #1
 8002dee:	428e      	cmp	r6, r1
 8002df0:	5462      	strb	r2, [r4, r1]
 8002df2:	dcfb      	bgt.n	8002dec <__sccl+0x58>
 8002df4:	1af1      	subs	r1, r6, r3
 8002df6:	3901      	subs	r1, #1
 8002df8:	42b3      	cmp	r3, r6
 8002dfa:	bfa8      	it	ge
 8002dfc:	2100      	movge	r1, #0
 8002dfe:	1c58      	adds	r0, r3, #1
 8002e00:	1843      	adds	r3, r0, r1
 8002e02:	e7e0      	b.n	8002dc6 <__sccl+0x32>

08002e04 <_strtol_l.constprop.0>:
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e0a:	4680      	mov	r8, r0
 8002e0c:	d001      	beq.n	8002e12 <_strtol_l.constprop.0+0xe>
 8002e0e:	2b24      	cmp	r3, #36	; 0x24
 8002e10:	d906      	bls.n	8002e20 <_strtol_l.constprop.0+0x1c>
 8002e12:	f7ff f929 	bl	8002068 <__errno>
 8002e16:	2316      	movs	r3, #22
 8002e18:	6003      	str	r3, [r0, #0]
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e20:	460d      	mov	r5, r1
 8002e22:	4f35      	ldr	r7, [pc, #212]	; (8002ef8 <_strtol_l.constprop.0+0xf4>)
 8002e24:	4628      	mov	r0, r5
 8002e26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e2a:	5de6      	ldrb	r6, [r4, r7]
 8002e2c:	f016 0608 	ands.w	r6, r6, #8
 8002e30:	d1f8      	bne.n	8002e24 <_strtol_l.constprop.0+0x20>
 8002e32:	2c2d      	cmp	r4, #45	; 0x2d
 8002e34:	d12f      	bne.n	8002e96 <_strtol_l.constprop.0+0x92>
 8002e36:	2601      	movs	r6, #1
 8002e38:	782c      	ldrb	r4, [r5, #0]
 8002e3a:	1c85      	adds	r5, r0, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d057      	beq.n	8002ef0 <_strtol_l.constprop.0+0xec>
 8002e40:	2b10      	cmp	r3, #16
 8002e42:	d109      	bne.n	8002e58 <_strtol_l.constprop.0+0x54>
 8002e44:	2c30      	cmp	r4, #48	; 0x30
 8002e46:	d107      	bne.n	8002e58 <_strtol_l.constprop.0+0x54>
 8002e48:	7828      	ldrb	r0, [r5, #0]
 8002e4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002e4e:	2858      	cmp	r0, #88	; 0x58
 8002e50:	d149      	bne.n	8002ee6 <_strtol_l.constprop.0+0xe2>
 8002e52:	2310      	movs	r3, #16
 8002e54:	786c      	ldrb	r4, [r5, #1]
 8002e56:	3502      	adds	r5, #2
 8002e58:	2700      	movs	r7, #0
 8002e5a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8002e5e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8002e62:	fbbe f9f3 	udiv	r9, lr, r3
 8002e66:	4638      	mov	r0, r7
 8002e68:	fb03 ea19 	mls	sl, r3, r9, lr
 8002e6c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002e70:	f1bc 0f09 	cmp.w	ip, #9
 8002e74:	d814      	bhi.n	8002ea0 <_strtol_l.constprop.0+0x9c>
 8002e76:	4664      	mov	r4, ip
 8002e78:	42a3      	cmp	r3, r4
 8002e7a:	dd22      	ble.n	8002ec2 <_strtol_l.constprop.0+0xbe>
 8002e7c:	2f00      	cmp	r7, #0
 8002e7e:	db1d      	blt.n	8002ebc <_strtol_l.constprop.0+0xb8>
 8002e80:	4581      	cmp	r9, r0
 8002e82:	d31b      	bcc.n	8002ebc <_strtol_l.constprop.0+0xb8>
 8002e84:	d101      	bne.n	8002e8a <_strtol_l.constprop.0+0x86>
 8002e86:	45a2      	cmp	sl, r4
 8002e88:	db18      	blt.n	8002ebc <_strtol_l.constprop.0+0xb8>
 8002e8a:	2701      	movs	r7, #1
 8002e8c:	fb00 4003 	mla	r0, r0, r3, r4
 8002e90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e94:	e7ea      	b.n	8002e6c <_strtol_l.constprop.0+0x68>
 8002e96:	2c2b      	cmp	r4, #43	; 0x2b
 8002e98:	bf04      	itt	eq
 8002e9a:	782c      	ldrbeq	r4, [r5, #0]
 8002e9c:	1c85      	addeq	r5, r0, #2
 8002e9e:	e7cd      	b.n	8002e3c <_strtol_l.constprop.0+0x38>
 8002ea0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002ea4:	f1bc 0f19 	cmp.w	ip, #25
 8002ea8:	d801      	bhi.n	8002eae <_strtol_l.constprop.0+0xaa>
 8002eaa:	3c37      	subs	r4, #55	; 0x37
 8002eac:	e7e4      	b.n	8002e78 <_strtol_l.constprop.0+0x74>
 8002eae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8002eb2:	f1bc 0f19 	cmp.w	ip, #25
 8002eb6:	d804      	bhi.n	8002ec2 <_strtol_l.constprop.0+0xbe>
 8002eb8:	3c57      	subs	r4, #87	; 0x57
 8002eba:	e7dd      	b.n	8002e78 <_strtol_l.constprop.0+0x74>
 8002ebc:	f04f 37ff 	mov.w	r7, #4294967295
 8002ec0:	e7e6      	b.n	8002e90 <_strtol_l.constprop.0+0x8c>
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	da07      	bge.n	8002ed6 <_strtol_l.constprop.0+0xd2>
 8002ec6:	2322      	movs	r3, #34	; 0x22
 8002ec8:	4670      	mov	r0, lr
 8002eca:	f8c8 3000 	str.w	r3, [r8]
 8002ece:	2a00      	cmp	r2, #0
 8002ed0:	d0a4      	beq.n	8002e1c <_strtol_l.constprop.0+0x18>
 8002ed2:	1e69      	subs	r1, r5, #1
 8002ed4:	e005      	b.n	8002ee2 <_strtol_l.constprop.0+0xde>
 8002ed6:	b106      	cbz	r6, 8002eda <_strtol_l.constprop.0+0xd6>
 8002ed8:	4240      	negs	r0, r0
 8002eda:	2a00      	cmp	r2, #0
 8002edc:	d09e      	beq.n	8002e1c <_strtol_l.constprop.0+0x18>
 8002ede:	2f00      	cmp	r7, #0
 8002ee0:	d1f7      	bne.n	8002ed2 <_strtol_l.constprop.0+0xce>
 8002ee2:	6011      	str	r1, [r2, #0]
 8002ee4:	e79a      	b.n	8002e1c <_strtol_l.constprop.0+0x18>
 8002ee6:	2430      	movs	r4, #48	; 0x30
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1b5      	bne.n	8002e58 <_strtol_l.constprop.0+0x54>
 8002eec:	2308      	movs	r3, #8
 8002eee:	e7b3      	b.n	8002e58 <_strtol_l.constprop.0+0x54>
 8002ef0:	2c30      	cmp	r4, #48	; 0x30
 8002ef2:	d0a9      	beq.n	8002e48 <_strtol_l.constprop.0+0x44>
 8002ef4:	230a      	movs	r3, #10
 8002ef6:	e7af      	b.n	8002e58 <_strtol_l.constprop.0+0x54>
 8002ef8:	08003455 	.word	0x08003455

08002efc <_strtol_r>:
 8002efc:	f7ff bf82 	b.w	8002e04 <_strtol_l.constprop.0>

08002f00 <_strtoul_l.constprop.0>:
 8002f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f04:	4686      	mov	lr, r0
 8002f06:	460d      	mov	r5, r1
 8002f08:	4f35      	ldr	r7, [pc, #212]	; (8002fe0 <_strtoul_l.constprop.0+0xe0>)
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f10:	5de6      	ldrb	r6, [r4, r7]
 8002f12:	f016 0608 	ands.w	r6, r6, #8
 8002f16:	d1f8      	bne.n	8002f0a <_strtoul_l.constprop.0+0xa>
 8002f18:	2c2d      	cmp	r4, #45	; 0x2d
 8002f1a:	d12f      	bne.n	8002f7c <_strtoul_l.constprop.0+0x7c>
 8002f1c:	2601      	movs	r6, #1
 8002f1e:	782c      	ldrb	r4, [r5, #0]
 8002f20:	1c85      	adds	r5, r0, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d057      	beq.n	8002fd6 <_strtoul_l.constprop.0+0xd6>
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d109      	bne.n	8002f3e <_strtoul_l.constprop.0+0x3e>
 8002f2a:	2c30      	cmp	r4, #48	; 0x30
 8002f2c:	d107      	bne.n	8002f3e <_strtoul_l.constprop.0+0x3e>
 8002f2e:	7828      	ldrb	r0, [r5, #0]
 8002f30:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002f34:	2858      	cmp	r0, #88	; 0x58
 8002f36:	d149      	bne.n	8002fcc <_strtoul_l.constprop.0+0xcc>
 8002f38:	2310      	movs	r3, #16
 8002f3a:	786c      	ldrb	r4, [r5, #1]
 8002f3c:	3502      	adds	r5, #2
 8002f3e:	f04f 38ff 	mov.w	r8, #4294967295
 8002f42:	fbb8 f8f3 	udiv	r8, r8, r3
 8002f46:	2700      	movs	r7, #0
 8002f48:	fb03 f908 	mul.w	r9, r3, r8
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	ea6f 0909 	mvn.w	r9, r9
 8002f52:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002f56:	f1bc 0f09 	cmp.w	ip, #9
 8002f5a:	d814      	bhi.n	8002f86 <_strtoul_l.constprop.0+0x86>
 8002f5c:	4664      	mov	r4, ip
 8002f5e:	42a3      	cmp	r3, r4
 8002f60:	dd22      	ble.n	8002fa8 <_strtoul_l.constprop.0+0xa8>
 8002f62:	2f00      	cmp	r7, #0
 8002f64:	db1d      	blt.n	8002fa2 <_strtoul_l.constprop.0+0xa2>
 8002f66:	4580      	cmp	r8, r0
 8002f68:	d31b      	bcc.n	8002fa2 <_strtoul_l.constprop.0+0xa2>
 8002f6a:	d101      	bne.n	8002f70 <_strtoul_l.constprop.0+0x70>
 8002f6c:	45a1      	cmp	r9, r4
 8002f6e:	db18      	blt.n	8002fa2 <_strtoul_l.constprop.0+0xa2>
 8002f70:	2701      	movs	r7, #1
 8002f72:	fb00 4003 	mla	r0, r0, r3, r4
 8002f76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f7a:	e7ea      	b.n	8002f52 <_strtoul_l.constprop.0+0x52>
 8002f7c:	2c2b      	cmp	r4, #43	; 0x2b
 8002f7e:	bf04      	itt	eq
 8002f80:	782c      	ldrbeq	r4, [r5, #0]
 8002f82:	1c85      	addeq	r5, r0, #2
 8002f84:	e7cd      	b.n	8002f22 <_strtoul_l.constprop.0+0x22>
 8002f86:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002f8a:	f1bc 0f19 	cmp.w	ip, #25
 8002f8e:	d801      	bhi.n	8002f94 <_strtoul_l.constprop.0+0x94>
 8002f90:	3c37      	subs	r4, #55	; 0x37
 8002f92:	e7e4      	b.n	8002f5e <_strtoul_l.constprop.0+0x5e>
 8002f94:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8002f98:	f1bc 0f19 	cmp.w	ip, #25
 8002f9c:	d804      	bhi.n	8002fa8 <_strtoul_l.constprop.0+0xa8>
 8002f9e:	3c57      	subs	r4, #87	; 0x57
 8002fa0:	e7dd      	b.n	8002f5e <_strtoul_l.constprop.0+0x5e>
 8002fa2:	f04f 37ff 	mov.w	r7, #4294967295
 8002fa6:	e7e6      	b.n	8002f76 <_strtoul_l.constprop.0+0x76>
 8002fa8:	2f00      	cmp	r7, #0
 8002faa:	da07      	bge.n	8002fbc <_strtoul_l.constprop.0+0xbc>
 8002fac:	2322      	movs	r3, #34	; 0x22
 8002fae:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb2:	f8ce 3000 	str.w	r3, [lr]
 8002fb6:	b932      	cbnz	r2, 8002fc6 <_strtoul_l.constprop.0+0xc6>
 8002fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fbc:	b106      	cbz	r6, 8002fc0 <_strtoul_l.constprop.0+0xc0>
 8002fbe:	4240      	negs	r0, r0
 8002fc0:	2a00      	cmp	r2, #0
 8002fc2:	d0f9      	beq.n	8002fb8 <_strtoul_l.constprop.0+0xb8>
 8002fc4:	b107      	cbz	r7, 8002fc8 <_strtoul_l.constprop.0+0xc8>
 8002fc6:	1e69      	subs	r1, r5, #1
 8002fc8:	6011      	str	r1, [r2, #0]
 8002fca:	e7f5      	b.n	8002fb8 <_strtoul_l.constprop.0+0xb8>
 8002fcc:	2430      	movs	r4, #48	; 0x30
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1b5      	bne.n	8002f3e <_strtoul_l.constprop.0+0x3e>
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	e7b3      	b.n	8002f3e <_strtoul_l.constprop.0+0x3e>
 8002fd6:	2c30      	cmp	r4, #48	; 0x30
 8002fd8:	d0a9      	beq.n	8002f2e <_strtoul_l.constprop.0+0x2e>
 8002fda:	230a      	movs	r3, #10
 8002fdc:	e7af      	b.n	8002f3e <_strtoul_l.constprop.0+0x3e>
 8002fde:	bf00      	nop
 8002fe0:	08003455 	.word	0x08003455

08002fe4 <_strtoul_r>:
 8002fe4:	f7ff bf8c 	b.w	8002f00 <_strtoul_l.constprop.0>

08002fe8 <__submore>:
 8002fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fec:	460c      	mov	r4, r1
 8002fee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ff4:	4299      	cmp	r1, r3
 8002ff6:	d11b      	bne.n	8003030 <__submore+0x48>
 8002ff8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ffc:	f000 f8cc 	bl	8003198 <_malloc_r>
 8003000:	b918      	cbnz	r0, 800300a <__submore+0x22>
 8003002:	f04f 30ff 	mov.w	r0, #4294967295
 8003006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800300a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800300e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003010:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003014:	6360      	str	r0, [r4, #52]	; 0x34
 8003016:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800301a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800301e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003022:	7043      	strb	r3, [r0, #1]
 8003024:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003028:	7003      	strb	r3, [r0, #0]
 800302a:	6020      	str	r0, [r4, #0]
 800302c:	2000      	movs	r0, #0
 800302e:	e7ea      	b.n	8003006 <__submore+0x1e>
 8003030:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003032:	0077      	lsls	r7, r6, #1
 8003034:	463a      	mov	r2, r7
 8003036:	f000 f923 	bl	8003280 <_realloc_r>
 800303a:	4605      	mov	r5, r0
 800303c:	2800      	cmp	r0, #0
 800303e:	d0e0      	beq.n	8003002 <__submore+0x1a>
 8003040:	eb00 0806 	add.w	r8, r0, r6
 8003044:	4601      	mov	r1, r0
 8003046:	4632      	mov	r2, r6
 8003048:	4640      	mov	r0, r8
 800304a:	f000 f815 	bl	8003078 <memcpy>
 800304e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003052:	f8c4 8000 	str.w	r8, [r4]
 8003056:	e7e9      	b.n	800302c <__submore+0x44>

08003058 <__retarget_lock_acquire_recursive>:
 8003058:	4770      	bx	lr

0800305a <__retarget_lock_release_recursive>:
 800305a:	4770      	bx	lr

0800305c <memchr>:
 800305c:	4603      	mov	r3, r0
 800305e:	b510      	push	{r4, lr}
 8003060:	b2c9      	uxtb	r1, r1
 8003062:	4402      	add	r2, r0
 8003064:	4293      	cmp	r3, r2
 8003066:	4618      	mov	r0, r3
 8003068:	d101      	bne.n	800306e <memchr+0x12>
 800306a:	2000      	movs	r0, #0
 800306c:	e003      	b.n	8003076 <memchr+0x1a>
 800306e:	7804      	ldrb	r4, [r0, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	428c      	cmp	r4, r1
 8003074:	d1f6      	bne.n	8003064 <memchr+0x8>
 8003076:	bd10      	pop	{r4, pc}

08003078 <memcpy>:
 8003078:	440a      	add	r2, r1
 800307a:	4291      	cmp	r1, r2
 800307c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003080:	d100      	bne.n	8003084 <memcpy+0xc>
 8003082:	4770      	bx	lr
 8003084:	b510      	push	{r4, lr}
 8003086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800308a:	4291      	cmp	r1, r2
 800308c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003090:	d1f9      	bne.n	8003086 <memcpy+0xe>
 8003092:	bd10      	pop	{r4, pc}

08003094 <memmove>:
 8003094:	4288      	cmp	r0, r1
 8003096:	b510      	push	{r4, lr}
 8003098:	eb01 0402 	add.w	r4, r1, r2
 800309c:	d902      	bls.n	80030a4 <memmove+0x10>
 800309e:	4284      	cmp	r4, r0
 80030a0:	4623      	mov	r3, r4
 80030a2:	d807      	bhi.n	80030b4 <memmove+0x20>
 80030a4:	1e43      	subs	r3, r0, #1
 80030a6:	42a1      	cmp	r1, r4
 80030a8:	d008      	beq.n	80030bc <memmove+0x28>
 80030aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80030b2:	e7f8      	b.n	80030a6 <memmove+0x12>
 80030b4:	4601      	mov	r1, r0
 80030b6:	4402      	add	r2, r0
 80030b8:	428a      	cmp	r2, r1
 80030ba:	d100      	bne.n	80030be <memmove+0x2a>
 80030bc:	bd10      	pop	{r4, pc}
 80030be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80030c6:	e7f7      	b.n	80030b8 <memmove+0x24>

080030c8 <_free_r>:
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	4605      	mov	r5, r0
 80030cc:	2900      	cmp	r1, #0
 80030ce:	d040      	beq.n	8003152 <_free_r+0x8a>
 80030d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030d4:	1f0c      	subs	r4, r1, #4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bfb8      	it	lt
 80030da:	18e4      	addlt	r4, r4, r3
 80030dc:	f000 f910 	bl	8003300 <__malloc_lock>
 80030e0:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <_free_r+0x8c>)
 80030e2:	6813      	ldr	r3, [r2, #0]
 80030e4:	b933      	cbnz	r3, 80030f4 <_free_r+0x2c>
 80030e6:	6063      	str	r3, [r4, #4]
 80030e8:	6014      	str	r4, [r2, #0]
 80030ea:	4628      	mov	r0, r5
 80030ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030f0:	f000 b90c 	b.w	800330c <__malloc_unlock>
 80030f4:	42a3      	cmp	r3, r4
 80030f6:	d908      	bls.n	800310a <_free_r+0x42>
 80030f8:	6820      	ldr	r0, [r4, #0]
 80030fa:	1821      	adds	r1, r4, r0
 80030fc:	428b      	cmp	r3, r1
 80030fe:	bf01      	itttt	eq
 8003100:	6819      	ldreq	r1, [r3, #0]
 8003102:	685b      	ldreq	r3, [r3, #4]
 8003104:	1809      	addeq	r1, r1, r0
 8003106:	6021      	streq	r1, [r4, #0]
 8003108:	e7ed      	b.n	80030e6 <_free_r+0x1e>
 800310a:	461a      	mov	r2, r3
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	b10b      	cbz	r3, 8003114 <_free_r+0x4c>
 8003110:	42a3      	cmp	r3, r4
 8003112:	d9fa      	bls.n	800310a <_free_r+0x42>
 8003114:	6811      	ldr	r1, [r2, #0]
 8003116:	1850      	adds	r0, r2, r1
 8003118:	42a0      	cmp	r0, r4
 800311a:	d10b      	bne.n	8003134 <_free_r+0x6c>
 800311c:	6820      	ldr	r0, [r4, #0]
 800311e:	4401      	add	r1, r0
 8003120:	1850      	adds	r0, r2, r1
 8003122:	4283      	cmp	r3, r0
 8003124:	6011      	str	r1, [r2, #0]
 8003126:	d1e0      	bne.n	80030ea <_free_r+0x22>
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4401      	add	r1, r0
 800312e:	6011      	str	r1, [r2, #0]
 8003130:	6053      	str	r3, [r2, #4]
 8003132:	e7da      	b.n	80030ea <_free_r+0x22>
 8003134:	d902      	bls.n	800313c <_free_r+0x74>
 8003136:	230c      	movs	r3, #12
 8003138:	602b      	str	r3, [r5, #0]
 800313a:	e7d6      	b.n	80030ea <_free_r+0x22>
 800313c:	6820      	ldr	r0, [r4, #0]
 800313e:	1821      	adds	r1, r4, r0
 8003140:	428b      	cmp	r3, r1
 8003142:	bf01      	itttt	eq
 8003144:	6819      	ldreq	r1, [r3, #0]
 8003146:	685b      	ldreq	r3, [r3, #4]
 8003148:	1809      	addeq	r1, r1, r0
 800314a:	6021      	streq	r1, [r4, #0]
 800314c:	6063      	str	r3, [r4, #4]
 800314e:	6054      	str	r4, [r2, #4]
 8003150:	e7cb      	b.n	80030ea <_free_r+0x22>
 8003152:	bd38      	pop	{r3, r4, r5, pc}
 8003154:	20000198 	.word	0x20000198

08003158 <sbrk_aligned>:
 8003158:	b570      	push	{r4, r5, r6, lr}
 800315a:	4e0e      	ldr	r6, [pc, #56]	; (8003194 <sbrk_aligned+0x3c>)
 800315c:	460c      	mov	r4, r1
 800315e:	6831      	ldr	r1, [r6, #0]
 8003160:	4605      	mov	r5, r0
 8003162:	b911      	cbnz	r1, 800316a <sbrk_aligned+0x12>
 8003164:	f000 f8bc 	bl	80032e0 <_sbrk_r>
 8003168:	6030      	str	r0, [r6, #0]
 800316a:	4621      	mov	r1, r4
 800316c:	4628      	mov	r0, r5
 800316e:	f000 f8b7 	bl	80032e0 <_sbrk_r>
 8003172:	1c43      	adds	r3, r0, #1
 8003174:	d00a      	beq.n	800318c <sbrk_aligned+0x34>
 8003176:	1cc4      	adds	r4, r0, #3
 8003178:	f024 0403 	bic.w	r4, r4, #3
 800317c:	42a0      	cmp	r0, r4
 800317e:	d007      	beq.n	8003190 <sbrk_aligned+0x38>
 8003180:	1a21      	subs	r1, r4, r0
 8003182:	4628      	mov	r0, r5
 8003184:	f000 f8ac 	bl	80032e0 <_sbrk_r>
 8003188:	3001      	adds	r0, #1
 800318a:	d101      	bne.n	8003190 <sbrk_aligned+0x38>
 800318c:	f04f 34ff 	mov.w	r4, #4294967295
 8003190:	4620      	mov	r0, r4
 8003192:	bd70      	pop	{r4, r5, r6, pc}
 8003194:	2000019c 	.word	0x2000019c

08003198 <_malloc_r>:
 8003198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800319c:	1ccd      	adds	r5, r1, #3
 800319e:	f025 0503 	bic.w	r5, r5, #3
 80031a2:	3508      	adds	r5, #8
 80031a4:	2d0c      	cmp	r5, #12
 80031a6:	bf38      	it	cc
 80031a8:	250c      	movcc	r5, #12
 80031aa:	2d00      	cmp	r5, #0
 80031ac:	4607      	mov	r7, r0
 80031ae:	db01      	blt.n	80031b4 <_malloc_r+0x1c>
 80031b0:	42a9      	cmp	r1, r5
 80031b2:	d905      	bls.n	80031c0 <_malloc_r+0x28>
 80031b4:	230c      	movs	r3, #12
 80031b6:	2600      	movs	r6, #0
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	4630      	mov	r0, r6
 80031bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031c0:	4e2e      	ldr	r6, [pc, #184]	; (800327c <_malloc_r+0xe4>)
 80031c2:	f000 f89d 	bl	8003300 <__malloc_lock>
 80031c6:	6833      	ldr	r3, [r6, #0]
 80031c8:	461c      	mov	r4, r3
 80031ca:	bb34      	cbnz	r4, 800321a <_malloc_r+0x82>
 80031cc:	4629      	mov	r1, r5
 80031ce:	4638      	mov	r0, r7
 80031d0:	f7ff ffc2 	bl	8003158 <sbrk_aligned>
 80031d4:	1c43      	adds	r3, r0, #1
 80031d6:	4604      	mov	r4, r0
 80031d8:	d14d      	bne.n	8003276 <_malloc_r+0xde>
 80031da:	6834      	ldr	r4, [r6, #0]
 80031dc:	4626      	mov	r6, r4
 80031de:	2e00      	cmp	r6, #0
 80031e0:	d140      	bne.n	8003264 <_malloc_r+0xcc>
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	4631      	mov	r1, r6
 80031e6:	4638      	mov	r0, r7
 80031e8:	eb04 0803 	add.w	r8, r4, r3
 80031ec:	f000 f878 	bl	80032e0 <_sbrk_r>
 80031f0:	4580      	cmp	r8, r0
 80031f2:	d13a      	bne.n	800326a <_malloc_r+0xd2>
 80031f4:	6821      	ldr	r1, [r4, #0]
 80031f6:	3503      	adds	r5, #3
 80031f8:	1a6d      	subs	r5, r5, r1
 80031fa:	f025 0503 	bic.w	r5, r5, #3
 80031fe:	3508      	adds	r5, #8
 8003200:	2d0c      	cmp	r5, #12
 8003202:	bf38      	it	cc
 8003204:	250c      	movcc	r5, #12
 8003206:	4638      	mov	r0, r7
 8003208:	4629      	mov	r1, r5
 800320a:	f7ff ffa5 	bl	8003158 <sbrk_aligned>
 800320e:	3001      	adds	r0, #1
 8003210:	d02b      	beq.n	800326a <_malloc_r+0xd2>
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	442b      	add	r3, r5
 8003216:	6023      	str	r3, [r4, #0]
 8003218:	e00e      	b.n	8003238 <_malloc_r+0xa0>
 800321a:	6822      	ldr	r2, [r4, #0]
 800321c:	1b52      	subs	r2, r2, r5
 800321e:	d41e      	bmi.n	800325e <_malloc_r+0xc6>
 8003220:	2a0b      	cmp	r2, #11
 8003222:	d916      	bls.n	8003252 <_malloc_r+0xba>
 8003224:	1961      	adds	r1, r4, r5
 8003226:	42a3      	cmp	r3, r4
 8003228:	6025      	str	r5, [r4, #0]
 800322a:	bf18      	it	ne
 800322c:	6059      	strne	r1, [r3, #4]
 800322e:	6863      	ldr	r3, [r4, #4]
 8003230:	bf08      	it	eq
 8003232:	6031      	streq	r1, [r6, #0]
 8003234:	5162      	str	r2, [r4, r5]
 8003236:	604b      	str	r3, [r1, #4]
 8003238:	4638      	mov	r0, r7
 800323a:	f104 060b 	add.w	r6, r4, #11
 800323e:	f000 f865 	bl	800330c <__malloc_unlock>
 8003242:	f026 0607 	bic.w	r6, r6, #7
 8003246:	1d23      	adds	r3, r4, #4
 8003248:	1af2      	subs	r2, r6, r3
 800324a:	d0b6      	beq.n	80031ba <_malloc_r+0x22>
 800324c:	1b9b      	subs	r3, r3, r6
 800324e:	50a3      	str	r3, [r4, r2]
 8003250:	e7b3      	b.n	80031ba <_malloc_r+0x22>
 8003252:	6862      	ldr	r2, [r4, #4]
 8003254:	42a3      	cmp	r3, r4
 8003256:	bf0c      	ite	eq
 8003258:	6032      	streq	r2, [r6, #0]
 800325a:	605a      	strne	r2, [r3, #4]
 800325c:	e7ec      	b.n	8003238 <_malloc_r+0xa0>
 800325e:	4623      	mov	r3, r4
 8003260:	6864      	ldr	r4, [r4, #4]
 8003262:	e7b2      	b.n	80031ca <_malloc_r+0x32>
 8003264:	4634      	mov	r4, r6
 8003266:	6876      	ldr	r6, [r6, #4]
 8003268:	e7b9      	b.n	80031de <_malloc_r+0x46>
 800326a:	230c      	movs	r3, #12
 800326c:	4638      	mov	r0, r7
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	f000 f84c 	bl	800330c <__malloc_unlock>
 8003274:	e7a1      	b.n	80031ba <_malloc_r+0x22>
 8003276:	6025      	str	r5, [r4, #0]
 8003278:	e7de      	b.n	8003238 <_malloc_r+0xa0>
 800327a:	bf00      	nop
 800327c:	20000198 	.word	0x20000198

08003280 <_realloc_r>:
 8003280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003284:	4680      	mov	r8, r0
 8003286:	4614      	mov	r4, r2
 8003288:	460e      	mov	r6, r1
 800328a:	b921      	cbnz	r1, 8003296 <_realloc_r+0x16>
 800328c:	4611      	mov	r1, r2
 800328e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003292:	f7ff bf81 	b.w	8003198 <_malloc_r>
 8003296:	b92a      	cbnz	r2, 80032a4 <_realloc_r+0x24>
 8003298:	f7ff ff16 	bl	80030c8 <_free_r>
 800329c:	4625      	mov	r5, r4
 800329e:	4628      	mov	r0, r5
 80032a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032a4:	f000 f838 	bl	8003318 <_malloc_usable_size_r>
 80032a8:	4284      	cmp	r4, r0
 80032aa:	4607      	mov	r7, r0
 80032ac:	d802      	bhi.n	80032b4 <_realloc_r+0x34>
 80032ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80032b2:	d812      	bhi.n	80032da <_realloc_r+0x5a>
 80032b4:	4621      	mov	r1, r4
 80032b6:	4640      	mov	r0, r8
 80032b8:	f7ff ff6e 	bl	8003198 <_malloc_r>
 80032bc:	4605      	mov	r5, r0
 80032be:	2800      	cmp	r0, #0
 80032c0:	d0ed      	beq.n	800329e <_realloc_r+0x1e>
 80032c2:	42bc      	cmp	r4, r7
 80032c4:	4622      	mov	r2, r4
 80032c6:	4631      	mov	r1, r6
 80032c8:	bf28      	it	cs
 80032ca:	463a      	movcs	r2, r7
 80032cc:	f7ff fed4 	bl	8003078 <memcpy>
 80032d0:	4631      	mov	r1, r6
 80032d2:	4640      	mov	r0, r8
 80032d4:	f7ff fef8 	bl	80030c8 <_free_r>
 80032d8:	e7e1      	b.n	800329e <_realloc_r+0x1e>
 80032da:	4635      	mov	r5, r6
 80032dc:	e7df      	b.n	800329e <_realloc_r+0x1e>
	...

080032e0 <_sbrk_r>:
 80032e0:	b538      	push	{r3, r4, r5, lr}
 80032e2:	2300      	movs	r3, #0
 80032e4:	4d05      	ldr	r5, [pc, #20]	; (80032fc <_sbrk_r+0x1c>)
 80032e6:	4604      	mov	r4, r0
 80032e8:	4608      	mov	r0, r1
 80032ea:	602b      	str	r3, [r5, #0]
 80032ec:	f7fd f9d8 	bl	80006a0 <_sbrk>
 80032f0:	1c43      	adds	r3, r0, #1
 80032f2:	d102      	bne.n	80032fa <_sbrk_r+0x1a>
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	b103      	cbz	r3, 80032fa <_sbrk_r+0x1a>
 80032f8:	6023      	str	r3, [r4, #0]
 80032fa:	bd38      	pop	{r3, r4, r5, pc}
 80032fc:	20000190 	.word	0x20000190

08003300 <__malloc_lock>:
 8003300:	4801      	ldr	r0, [pc, #4]	; (8003308 <__malloc_lock+0x8>)
 8003302:	f7ff bea9 	b.w	8003058 <__retarget_lock_acquire_recursive>
 8003306:	bf00      	nop
 8003308:	20000194 	.word	0x20000194

0800330c <__malloc_unlock>:
 800330c:	4801      	ldr	r0, [pc, #4]	; (8003314 <__malloc_unlock+0x8>)
 800330e:	f7ff bea4 	b.w	800305a <__retarget_lock_release_recursive>
 8003312:	bf00      	nop
 8003314:	20000194 	.word	0x20000194

08003318 <_malloc_usable_size_r>:
 8003318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800331c:	1f18      	subs	r0, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	bfbc      	itt	lt
 8003322:	580b      	ldrlt	r3, [r1, r0]
 8003324:	18c0      	addlt	r0, r0, r3
 8003326:	4770      	bx	lr

08003328 <_init>:
 8003328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332a:	bf00      	nop
 800332c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332e:	bc08      	pop	{r3}
 8003330:	469e      	mov	lr, r3
 8003332:	4770      	bx	lr

08003334 <_fini>:
 8003334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003336:	bf00      	nop
 8003338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333a:	bc08      	pop	{r3}
 800333c:	469e      	mov	lr, r3
 800333e:	4770      	bx	lr
